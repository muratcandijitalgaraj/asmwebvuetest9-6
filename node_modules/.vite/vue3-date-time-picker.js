import {
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentScope,
  guardReactiveProps,
  inject,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onBeforeUpdate,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useSlots,
  watch,
  withCtx,
  withKeys,
  withModifiers
} from "./chunk-YKE26KAB.js";
import "./chunk-IEEWYB6S.js";

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || typeof duration !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/startOfWeek/index.js
function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfISOWeek/index.js
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}

// node_modules/date-fns/esm/getISOWeekYear/index.js
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/startOfISOWeekYear/index.js
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/constants/index.js
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/endOfWeek/index.js
function endOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function(date, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale2 = options.locale || en_US_default;
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  dirtyObject = dirtyObject || {};
  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDay/index.js
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth2 = new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getHours/index.js
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

// node_modules/date-fns/esm/getISOWeek/index.js
var MILLISECONDS_IN_WEEK3 = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK3) + 1;
}

// node_modules/date-fns/esm/getMinutes/index.js
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}

// node_modules/date-fns/esm/getMonth/index.js
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY3 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/getSeconds/index.js
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

// node_modules/date-fns/esm/getYear/index.js
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}

// node_modules/date-fns/esm/subDays/index.js
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/date-fns/esm/sub/index.js
function sub(date, duration) {
  requiredArgs(2, arguments);
  if (!duration || typeof duration !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var dateWithoutMonths = subMonths(date, months + years * 12);
  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7);
  var minutestoSub = minutes + hours * 60;
  var secondstoSub = seconds + minutestoSub * 60;
  var mstoSub = secondstoSub * 1e3;
  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
  return finalDate;
}

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

// node_modules/date-fns/esm/isEqual/index.js
function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var MILLISECONDS_IN_HOUR = 36e5;
var MILLISECONDS_IN_MINUTE2 = 6e4;
var MILLISECONDS_IN_SECOND = 1e3;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE2 + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}
function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), string, valueCallback);
  }
}
function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), string, valueCallback);
  }
}
function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var parsers = {
  G: {
    priority: 140,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(string, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(string, {
            width: "wide"
          }) || match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
      }
    },
    set: function(date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["R", "u", "t", "T"]
  },
  y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return parseNDigits(4, string, valueCallback);
        case "yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
  },
  Y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return parseNDigits(4, string, valueCallback);
        case "Yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  R: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "R") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  u: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "u") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
  },
  Q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, string);
        case "Qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, string);
        case "qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  M: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "MM":
          return parseNDigits(2, string, valueCallback);
        case "Mo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "MMM":
          return match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(string, {
            width: "wide",
            context: "formatting"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  L: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "LL":
          return parseNDigits(2, string, valueCallback);
        case "Lo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "LLL":
          return match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(string, {
            width: "wide",
            context: "standalone"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  w: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, string);
        case "wo":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  I: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, string);
        case "Io":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  d: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, string);
        case "do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  D: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, string);
        case "Do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
  },
  E: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
  },
  e: {
    priority: 90,
    parse: function(string, token, match2, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return parseNDigits(token.length, string, valueCallback);
        case "eo":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "eee":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
  },
  c: {
    priority: 90,
    parse: function(string, token, match2, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return parseNDigits(token.length, string, valueCallback);
        case "co":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "ccc":
          return match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(string, {
            width: "wide",
            context: "standalone"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
  },
  i: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, string);
        case "io":
          return match2.ordinalNumber(string, {
            unit: "day"
          });
        case "iii":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiii":
          return match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiiii":
          return match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiii":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function(date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
  },
  a: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["b", "B", "H", "k", "t", "T"]
  },
  b: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "B", "H", "k", "t", "T"]
  },
  B: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "t", "T"]
  },
  h: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, string);
        case "ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["H", "K", "k", "t", "T"]
  },
  H: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, string);
        case "Ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
  },
  K: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, string);
        case "Ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["h", "H", "k", "t", "T"]
  },
  k: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, string);
        case "ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function(date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
  },
  m: {
    priority: 60,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, string);
        case "mo":
          return match2.ordinalNumber(string, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  s: {
    priority: 50,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, string);
        case "so":
          return match2.ordinalNumber(string, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  S: {
    priority: 30,
    parse: function(string, token, _match, _options) {
      var valueCallback = function(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return parseNDigits(token.length, string, valueCallback);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  X: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "x"]
  },
  x: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "X"]
  },
  t: {
    priority: 40,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  },
  T: {
    priority: 20,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  }
};
var parsers_default = parsers;

// node_modules/date-fns/esm/parse/index.js
var TIMEZONE_UNIT_PRIORITY = 10;
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale2 = options.locale || en_US_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter2 = substring[0];
    if (firstCharacter2 === "p" || firstCharacter2 === "P") {
      var longFormatter = longFormatters_default[firstCharacter2];
      return longFormatter(substring, locale2.formatLong, subFnOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    var firstCharacter = token[0];
    var parser = parsers_default[firstCharacter];
    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;
      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;
        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;
          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }
        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === "*" && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }
      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale2.match, subFnOptions);
      if (!parseResult) {
        return new Date(NaN);
      }
      setters.push({
        priority: parser.priority,
        subPriority: parser.subPriority || 0,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString2(token);
      }
      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a, b) {
    return b - a;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date)) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];
    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }
    var result = setter.set(utcDate, flags, setter.value, subFnOptions);
    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]);
    } else {
      utcDate = result;
    }
  }
  return utcDate;
}
function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }
  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// node_modules/date-fns/esm/setMonth/index.js
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

// node_modules/date-fns/esm/set/index.js
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (typeof values !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}

// node_modules/date-fns/esm/setHours/index.js
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

// node_modules/date-fns/esm/setMilliseconds/index.js
function setMilliseconds(dirtyDate, dirtyMilliseconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var milliseconds2 = toInteger(dirtyMilliseconds);
  date.setMilliseconds(milliseconds2);
  return date;
}

// node_modules/date-fns/esm/setMinutes/index.js
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

// node_modules/date-fns/esm/setSeconds/index.js
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

// node_modules/date-fns/esm/setYear/index.js
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}

// node_modules/date-fns/esm/subYears/index.js
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

// node_modules/vue3-date-time-picker/dist/vue3-date-time-picker.esm.js
function he(e, t, n) {
  return t in e ? Object.defineProperty(e, t, { value: n, enumerable: true, configurable: true, writable: true }) : e[t] = n, e;
}
function _e(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var n = 0, a = new Array(t); n < t; n++)
    a[n] = e[n];
  return a;
}
function ge(e, t) {
  if (e) {
    if (typeof e == "string")
      return _e(e, t);
    var n = Object.prototype.toString.call(e).slice(8, -1);
    return n === "Object" && e.constructor && (n = e.constructor.name), n === "Map" || n === "Set" ? Array.from(e) : n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _e(e, t) : void 0;
  }
}
function we(e, t) {
  return function(e2) {
    if (Array.isArray(e2))
      return e2;
  }(e) || function(e2, t2) {
    var n = e2 == null ? null : typeof Symbol != "undefined" && e2[Symbol.iterator] || e2["@@iterator"];
    if (n != null) {
      var a, r, l = [], o = true, u = false;
      try {
        for (n = n.call(e2); !(o = (a = n.next()).done) && (l.push(a.value), !t2 || l.length !== t2); o = true)
          ;
      } catch (e3) {
        u = true, r = e3;
      } finally {
        try {
          o || n.return == null || n.return();
        } finally {
          if (u)
            throw r;
        }
      }
      return l;
    }
  }(e, t) || ge(e, t) || function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
var be = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var ke = [createBaseVNode("path", { d: "M29.333 8c0-2.208-1.792-4-4-4h-18.667c-2.208 0-4 1.792-4 4v18.667c0 2.208 1.792 4 4 4h18.667c2.208 0 4-1.792 4-4v-18.667zM26.667 8v18.667c0 0.736-0.597 1.333-1.333 1.333 0 0-18.667 0-18.667 0-0.736 0-1.333-0.597-1.333-1.333 0 0 0-18.667 0-18.667 0-0.736 0.597-1.333 1.333-1.333 0 0 18.667 0 18.667 0 0.736 0 1.333 0.597 1.333 1.333z" }, null, -1), createBaseVNode("path", { d: "M20 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1), createBaseVNode("path", { d: "M9.333 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1), createBaseVNode("path", { d: "M4 14.667h24c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-24c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333z" }, null, -1)];
var De = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", be, ke);
} };
var Se = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var Oe = [createBaseVNode("path", { d: "M23.057 7.057l-16 16c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l16-16c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0z" }, null, -1), createBaseVNode("path", { d: "M7.057 8.943l16 16c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885l-16-16c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z" }, null, -1)];
var xe = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Se, Oe);
} };
var Pe = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var Me = [createBaseVNode("path", { d: "M20.943 23.057l-7.057-7.057c0 0 7.057-7.057 7.057-7.057 0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-8 8c-0.521 0.521-0.521 1.365 0 1.885l8 8c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z" }, null, -1)];
var Ce = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Pe, Me);
} };
var Ae = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var $e = [createBaseVNode("path", { d: "M12.943 24.943l8-8c0.521-0.521 0.521-1.365 0-1.885l-8-8c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885l7.057 7.057c0 0-7.057 7.057-7.057 7.057-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0z" }, null, -1)];
var Ve = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Ae, $e);
} };
var Ie = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var Te = [createBaseVNode("path", { d: "M16 1.333c-8.095 0-14.667 6.572-14.667 14.667s6.572 14.667 14.667 14.667c8.095 0 14.667-6.572 14.667-14.667s-6.572-14.667-14.667-14.667zM16 4c6.623 0 12 5.377 12 12s-5.377 12-12 12c-6.623 0-12-5.377-12-12s5.377-12 12-12z" }, null, -1), createBaseVNode("path", { d: "M14.667 8v8c0 0.505 0.285 0.967 0.737 1.193l5.333 2.667c0.658 0.329 1.46 0.062 1.789-0.596s0.062-1.46-0.596-1.789l-4.596-2.298c0 0 0-7.176 0-7.176 0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1)];
var Be = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Ie, Te);
} };
var Ne = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var je = [createBaseVNode("path", { d: "M24.943 19.057l-8-8c-0.521-0.521-1.365-0.521-1.885 0l-8 8c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l7.057-7.057c0 0 7.057 7.057 7.057 7.057 0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z" }, null, -1)];
var Re = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Ne, je);
} };
var Ee = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var Fe = [createBaseVNode("path", { d: "M7.057 12.943l8 8c0.521 0.521 1.365 0.521 1.885 0l8-8c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-7.057 7.057c0 0-7.057-7.057-7.057-7.057-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z" }, null, -1)];
var Ye = { render: function(n, a) {
  return openBlock(), createElementBlock("svg", Ee, Fe);
} };
var Ke = function(e) {
  var t = 6e4 * e.getTimezoneOffset();
  return new Date(e.getTime() - t);
};
var Ue = function(e, t) {
  var n = parse(e, t.slice(0, e.length), new Date());
  return isValid(n) && isDate(n) ? n : null;
};
var He = function(e) {
  var t = new Date(JSON.parse(JSON.stringify(e)));
  return t = setHours(t, 0), t = setMinutes(t, 0), t = setSeconds(t, 0), t = setMilliseconds(t, 0);
};
var Ge = function(e) {
  return Array.isArray(e) ? isValid(e[0]) && (!e[1] || isValid(e[1])) : !!e && isValid(e);
};
var Le = function(e, t, n, a) {
  var r = e ? new Date(e) : new Date();
  return (t || t === 0) && (r = setHours(r, +t)), (n || n === 0) && (r = setMinutes(r, +n)), (a || a === 0) && (r = setSeconds(r, +a)), setMilliseconds(r, 0);
};
var We = function(e) {
  var t = addMonths(e, 1);
  return { month: getMonth(t), year: getYear(t) };
};
var ze = function(e, t, n) {
  var a = e ? new Date(e) : new Date();
  return (t || t === 0) && (a = setMonth(a, t)), n && (a = setYear(a, n)), a;
};
var qe = function(e, t) {
  return e ? "HH:mm".concat(t ? ":ss" : "") : "hh:mm".concat(t ? ":ss" : "", " aa");
};
var Je = function(e, t, n, a, r, l, o) {
  return e || (a ? "MM/yyyy" : r ? qe(t, n) : l ? "MM/dd/yyyy" : o ? "MM/dd/yyyy, ".concat(qe(t, n)) : "MM/dd/yyyy");
};
var Xe = function(e) {
  var t = e || new Date();
  return { hours: getHours(t), minutes: getMinutes(t), seconds: getSeconds(t) };
};
var Ze = function(e) {
  return { month: getMonth(e), year: getYear(e) };
};
var Qe = function(e) {
  return Array.isArray(e) ? [Ze(e[0]), e[1] ? Ze(e[1]) : null] : Ze(e);
};
var et = function(e) {
  return Array.isArray(e) ? [Xe(e[0]), Xe(e[1])] : Xe(e);
};
var tt = function(e, t, n) {
  return n ? format(e, t, { locale: n }) : format(e, t);
};
var nt = function(e, t, n, a) {
  return Array.isArray(e) ? "".concat(tt(e[0], t, n), " ").concat(a || "-", " ").concat(e[1] ? tt(e[1], t, n) : "") : tt(e, t, n);
};
var at = function(e, t) {
  return !(!e || !t) && isAfter(He(e), He(t));
};
var rt = function(e, t) {
  return !(!e || !t) && isBefore(He(e), He(t));
};
var lt = function(e, t) {
  return !(!e || !t) && isEqual(He(e), He(t));
};
var ot = function(e, t) {
  return add(set(new Date(), e), t);
};
var ut = function(e, t) {
  return sub(set(new Date(), e), t);
};
var it = function(e) {
  return set(new Date(), { hours: getHours(e), minutes: getMinutes(e), seconds: getSeconds(e) });
};
var st = function(e) {
  return set(new Date(), { hours: +e.hours || 0, minutes: +e.minutes || 0, seconds: +e.seconds || 0 });
};
var ct = function(e, t, n) {
  var a = true;
  if (!e)
    return true;
  var r = Array.isArray(e) ? [e[0] ? it(e[0]) : null, e[1] ? it(e[1]) : null] : it(e);
  if (t) {
    var l = st(t);
    a = Array.isArray(r) ? (!r[0] || r[0].getTime() <= l.getTime()) && (!r[1] || r[1].getTime() <= l.getTime()) : r.getTime() <= l.getTime();
  }
  if (n) {
    var o = st(n);
    a = Array.isArray(r) ? (!r[0] || r[0].getTime() >= o.getTime()) && (!r[1] || r[1].getTime() >= o.getTime()) && a : r.getTime() >= o.getTime() && a;
  }
  return a;
};
var dt = function(e) {
  var t = Date.UTC(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate(), e.getUTCHours(), e.getUTCMinutes(), e.getUTCSeconds());
  return new Date(t).toISOString();
};
var ft = function(e, t, n) {
  return e && e[0] && e[1] ? at(n, e[0]) && rt(n, e[1]) : !!(e && e[0] && t) && (at(n, e[0]) && rt(n, t) || rt(n, e[0]) && at(n, t));
};
var pt = function(e, t) {
  return [startOfWeek(e, { weekStartsOn: t }), endOfWeek(e, { weekStartsOn: t })];
};
function mt(e) {
  return function(e2) {
    if (Array.isArray(e2))
      return _e(e2);
  }(e) || function(e2) {
    if (typeof Symbol != "undefined" && e2[Symbol.iterator] != null || e2["@@iterator"] != null)
      return Array.from(e2);
  }(e) || ge(e) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
var vt = function(e, t, n, a) {
  var r = [], l = new Date(t, e), o = new Date(t, e + 1, 0);
  return function t2(n2) {
    var l2 = function(e2, t3, n3) {
      for (var a2 = new Date(JSON.parse(JSON.stringify(e2))), r2 = [], l3 = 0; l3 < 7; l3++) {
        var o2 = addDays(a2, l3), u = getMonth(o2) !== t3;
        r2.push({ text: n3 && u ? "" : o2.getDate(), value: o2, current: !u });
      }
      return r2;
    }(n2, e, a);
    (r.push({ days: l2 }), r[r.length - 1].days.some(function(e2) {
      return lt(He(e2.value), He(o));
    })) || t2(addDays(n2, 7));
  }(startOfWeek(l, { weekStartsOn: n })), r;
};
var yt = function(e) {
  return function(t) {
    for (var n = "", a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", r = a.length, l = 0; l < t; l++)
      n += a.charAt(Math.floor(Math.random() * r));
    return n + e;
  }(5);
};
var ht = function(e) {
  var t, n = unref(e);
  return (t = n == null ? void 0 : n.$el) !== null && t !== void 0 ? t : n;
};
var _t = function(e) {
  return Object.assign({ open: "dp-open", close: "dp-close", next: "calendar-next", previous: "calendar-prev" }, e);
};
var gt = ["aria-disabled", "aria-readonly"];
var wt = { key: 1, class: "dp__input_wrap" };
var bt = ["id", "name", "placeholder", "disabled", "readonly", "required", "value", "autocomplete", "onKeydown"];
var kt = { key: 4, class: "dp__clear_icon" };
var Dt = defineComponent({ props: { name: { type: String, default: null }, inputValue: { type: String, default: "" }, placeholder: { type: String, default: "" }, hideInputIcon: { type: Boolean, default: false }, disabled: { type: Boolean, default: true }, readonly: { type: Boolean, default: true }, clearable: { type: Boolean, default: true }, range: { type: Boolean, default: false }, state: { type: Boolean, default: null }, inputClassName: { type: String, default: null }, inline: { type: Boolean, default: false }, inlineWithInput: { type: Boolean, default: false }, textInput: { type: Boolean, default: false }, textInputOptions: { type: Object, default: function() {
  return null;
} }, isMenuOpen: { type: Boolean, default: false }, autoApply: { type: Boolean, default: false }, pattern: { type: String, default: "" }, uid: { type: String, default: null }, openMenuOnFocus: { type: Boolean, default: true }, required: { type: Boolean, default: false }, autocomplete: { type: String, default: "off" } }, emits: ["clear", "open", "update:inputValue", "setInputDate", "close", "selectDate", "setEmptyDate"], setup: function(n, r) {
  var m = r.expose, v = r.emit, y = n, h = ref(), _ = ref(null), g = ref(false), w = useSlots(), b = computed(function() {
    return he({ dp__pointer: !y.disabled && !y.readonly && !y.textInput, dp__disabled: y.disabled, dp__input: true, dp__input_icon_pad: !y.hideInputIcon, dp__input_valid: y.state, dp__input_invalid: y.state === false, dp__input_focus: g.value || y.isMenuOpen }, y.inputClassName, !!y.inputClassName);
  }), k = function(e) {
    var t = e.target.value, n2 = y.textInputOptions, a = n2.format, r2 = n2.rangeSeparator;
    if (t !== "") {
      if (y.range) {
        var l = we(t.split("".concat(r2)), 2), o = l[0], u = l[1];
        if (o && u) {
          var i = Ue(o.trim(), a || y.pattern), s = Ue(u.trim(), a || y.pattern);
          h.value = i && s ? [i, s] : null;
        }
      } else
        h.value = Ue(t, a || y.pattern);
      v("setInputDate", h.value);
    } else
      v("setInputDate", null), y.autoApply && (v("setEmptyDate"), h.value = null);
    v("update:inputValue", t);
  }, D = function() {
    var e, t;
    (e = y.textInputOptions) !== null && e !== void 0 && e.enterSubmit && Ge(h.value) && y.inputValue !== "" ? (v("setInputDate", h.value, true), h.value = null) : (t = y.textInputOptions) !== null && t !== void 0 && t.enterSubmit && y.inputValue === "" && (h.value = null, v("clear"));
  }, S = function() {
    var e, t;
    (e = y.textInputOptions) !== null && e !== void 0 && e.tabSubmit && Ge(h.value) && y.inputValue !== "" ? (v("setInputDate", h.value, true), h.value = null) : (t = y.textInputOptions) !== null && t !== void 0 && t.tabSubmit && y.inputValue === "" && (h.value = null, v("clear")), v("close");
  }, O = function() {
    y.inline || (g.value = true, y.openMenuOnFocus && !y.isMenuOpen ? v("open") : y.isMenuOpen && (A(), v("close")));
  }, x = function() {
    var e;
    (!y.openMenuOnFocus || w["dp-input"] || w.trigger) && (y.textInput && (e = y.textInputOptions) !== null && e !== void 0 && e.openMenu && !y.isMenuOpen ? v("open") : y.textInput || v("open"));
  }, P = function() {
    g.value = false, y.autoApply && y.textInput && h.value && (v("setInputDate", h.value), v("selectDate"), h.value = null);
  }, M = function(e) {
    e.stopImmediatePropagation();
  }, C = function() {
    v("clear");
  }, A = function() {
    g.value = false;
    var e = ht(_);
    e && e.blur();
  };
  return m({ unFocus: A }), function(r2, l) {
    return openBlock(), createElementBlock("div", { onClick: x, "aria-label": "Datepicker input", role: "textbox", "aria-multiline": "false", "aria-disabled": n.disabled, "aria-readonly": n.readonly }, [!r2.$slots.trigger || r2.$slots["dp-input"] || n.inline ? createCommentVNode("", true) : renderSlot(r2.$slots, "trigger", { key: 0 }), r2.$slots.trigger || n.inline && !n.inlineWithInput ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", wt, [!r2.$slots["dp-input"] || r2.$slots.trigger || n.inline ? createCommentVNode("", true) : renderSlot(r2.$slots, "dp-input", { key: 0, value: n.inputValue, onInput: k, onEnter: D, onTab: S, onClear: C }), r2.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", { key: 1, ref_key: "inputRef", ref: _, id: n.uid ? "dp-input-".concat(n.uid) : void 0, name: n.name, class: normalizeClass(unref(b)), placeholder: n.placeholder, disabled: n.disabled, readonly: n.readonly, required: n.required, value: n.inputValue, autocomplete: n.autocomplete, onInput: k, onKeydown: [withKeys(D, ["enter"]), withKeys(S, ["tab"])], onBlur: P, onFocus: O }, null, 42, bt)), r2.$slots["input-icon"] && !n.hideInputIcon ? (openBlock(), createElementBlock("span", { key: 2, class: "dp__input_icon", onClick: M }, [renderSlot(r2.$slots, "input-icon")])) : createCommentVNode("", true), r2.$slots["input-icon"] || n.hideInputIcon || r2.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(De), { key: 3, class: "dp__input_icon dp__input_icons", onClick: M })), r2.$slots["clear-icon"] && n.clearable && !n.disabled && !n.readonly ? (openBlock(), createElementBlock("span", kt, [renderSlot(r2.$slots, "clear-icon", { clear: C })])) : createCommentVNode("", true), !n.clearable || r2.$slots["clear-icon"] || !n.inputValue || n.disabled || n.readonly ? createCommentVNode("", true) : (openBlock(), createBlock(unref(xe), { key: 5, class: "dp__clear_icon dp__input_icons", onClick: withModifiers(C, ["stop", "prevent"]) }, null, 8, ["onClick"]))]))], 8, gt);
  };
} });
var St = { weekNumbers: { type: Boolean, default: false }, weekStart: { type: [Number, String], default: 1 }, disableMonthYearSelect: { type: Boolean, default: false }, menuClassName: { type: String, default: null }, calendarClassName: { type: String, default: null }, yearRange: { type: Array, default: function() {
  return [1970, 2100];
} }, range: { type: Boolean, default: false }, multiCalendarsSolo: { type: Boolean, default: false }, calendarCellClassName: { type: String, default: null }, enableTimePicker: { type: Boolean, default: true }, is24: { type: Boolean, default: true }, hoursIncrement: { type: [String, Number], default: 1 }, minutesIncrement: { type: [String, Number], default: 1 }, secondsIncrement: { type: [String, Number], default: 1 }, hoursGridIncrement: { type: [String, Number], default: 1 }, secondsGridIncrement: { type: [String, Number], default: 1 }, minutesGridIncrement: { type: [String, Number], default: 5 }, minDate: { type: [Date, String], default: null }, maxDate: { type: [Date, String], default: null }, autoApply: { type: Boolean, default: false }, selectText: { type: String, default: "Select" }, cancelText: { type: String, default: "Cancel" }, locale: { type: String, default: "en-US" }, weekNumName: { type: String, default: "W" }, disabledDates: { type: [Array, Function], default: function() {
  return [];
} }, minTime: { type: Object, default: null }, maxTime: { type: Object, default: null }, inline: { type: Boolean, default: false }, monthPicker: { type: Boolean, default: false }, timePicker: { type: Boolean, default: false }, monthNameFormat: { type: String, default: "short" }, startDate: { type: [Date, String], default: null }, startTime: { type: [Object, Array], default: null }, monthYearComponent: { type: Object, default: null }, timePickerComponent: { type: Object, default: null }, actionRowComponent: { type: Object, default: null }, customProps: { type: Object, default: null }, hideOffsetDates: { type: Boolean, default: false }, autoRange: { type: [Number, String], default: null }, noToday: { type: Boolean, default: false }, noHoursOverlay: { type: Boolean, default: false }, noMinutesOverlay: { type: Boolean, default: false }, noSecondsOverlay: { type: Boolean, default: false }, disabledWeekDays: { type: Array, default: function() {
  return [];
} }, allowedDates: { type: Array, default: function() {
  return [];
} }, showNowButton: { type: Boolean, default: false }, nowButtonLabel: { type: String, default: "Now" }, monthChangeOnScroll: { type: [Boolean, String], default: true }, markers: { type: Array, default: function() {
  return [];
} }, uid: { type: String, default: null }, modeHeight: { type: [Number, String], default: 255 }, enableSeconds: { type: Boolean, default: false }, escClose: { type: Boolean, default: true }, spaceConfirm: { type: Boolean, default: true }, monthChangeOnArrows: { type: Boolean, default: true }, textInput: { type: Boolean, default: false }, disabled: { type: Boolean, default: false }, readonly: { type: Boolean, default: false }, multiDates: { type: Boolean, default: false }, presetRanges: { type: Array, default: function() {
  return [];
} }, flow: { type: Array, default: function() {
  return [];
} }, preventMinMaxNavigation: { type: Boolean, default: false }, minRange: { type: [Number, String], default: null }, maxRange: { type: [Number, String], default: null }, fixedStart: { type: Boolean, default: false }, fixedEnd: { type: Boolean, default: false }, multiDatesLimit: { type: [Number, String], default: null }, reverseYears: { type: Boolean, default: false }, keepActionRow: { type: Boolean, default: false }, weekPicker: { type: Boolean, default: false } };
var Ot = function(e) {
  var t = {};
  return Object.keys(e).forEach(function(n) {
    t[n] = e[n];
  }), t;
};
var xt = { years: { type: Array, default: function() {
  return [];
} }, months: { type: Array, default: function() {
  return [];
} }, month: { type: Number, default: 0 }, year: { type: Number, default: 0 }, filters: { type: Object, default: function() {
  return {};
} }, monthPicker: { type: Boolean, default: false }, instance: { type: Number, default: 1 }, internalModelValue: { type: [Date, Array], default: null }, range: { type: Boolean, default: false }, multiCalendars: { type: Number, default: 0 }, multiCalendarsSolo: { type: Boolean, default: false }, customProps: { type: Object, default: null } };
function Pt(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(e);
    t && (a = a.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), n.push.apply(n, a);
  }
  return n;
}
function Mt(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = arguments[t] != null ? arguments[t] : {};
    t % 2 ? Pt(Object(n), true).forEach(function(t2) {
      he(e, t2, n[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Pt(Object(n)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(n, t2));
    });
  }
  return e;
}
var Ct = { class: "db__calendar_header", role: "row" };
var At = { key: 0, class: "dp__calendar_header_item", role: "gridcell" };
var $t = createBaseVNode("div", { class: "dp__calendar_header_separator" }, null, -1);
var Vt = { key: 0, class: "dp__calendar", role: "grid", "aria-label": "Calendar days" };
var It = { key: 0, role: "gridcell", class: "dp__calendar_item dp__week_num" };
var Tt = { class: "dp__cell_inner" };
var Bt = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var Nt = createBaseVNode("div", { class: "dp__arrow_bottom_tp" }, null, -1);
var jt = defineComponent({ props: Mt(Mt({}, xt), {}, { locale: { type: String, default: "en-Us" }, weekNumName: { type: String, default: "W" }, weekStart: { type: [Number, String], default: 1 }, weekNumbers: { type: Boolean, default: false }, mappedDates: { type: Array, default: function() {
  return [];
} }, monthYearComponent: { type: Object, default: null }, calendarClassName: { type: String, default: null }, timePicker: { type: Boolean, default: false }, disableMonthYearSelect: { type: Boolean, default: false }, getWeekNum: { type: Function, default: function() {
  return "";
} }, modeHeight: { type: [Number, String], default: 255 } }), emits: ["selectDate", "setHoverDate", "handleScroll", "mount"], setup: function(r, o) {
  var f = o.emit, P = r, M = ref(null), C = ref({ bottom: "", left: "", transform: "" }), A = ref([]), $ = ref(true), V = inject("transitions"), I = ref(""), T = toRef(P, "month"), B = toRef(P, "year"), N = ref(), j = ref(false), R = computed(function() {
    return function(e, t) {
      var n, a, r2 = [1, 2, 3, 4, 5, 6, 7].map(function(t2) {
        return new Intl.DateTimeFormat(e, { weekday: "short", timeZone: "UTC" }).format(new Date("2017-01-0".concat(t2, "T00:00:00+00:00"))).slice(0, 2);
      }), l = r2.slice(0, t), o2 = r2.slice(t + 1, r2.length);
      return (n = (a = [r2[t]]).concat.apply(a, mt(o2))).concat.apply(n, mt(l));
    }(P.locale, +P.weekStart);
  });
  onMounted(function() {
    P.internalModelValue || (j.value = true), N.value = ze(new Date(), P.month, P.year), f("mount");
  });
  var E = computed(function() {
    return P.monthPicker || P.timePicker;
  });
  watch([T, B], function() {
    if (V != null && V.value) {
      var e = ze(new Date(), P.month, P.year);
      I.value = at(ze(new Date(), P.month, P.year), N.value) ? V.value.next : V.value.previous, N.value = e, j.value && ($.value = false, nextTick(function() {
        $.value = true;
      }));
    }
    j.value || (j.value = true);
  });
  var F = computed(function() {
    return he({ dp__calendar_wrap: true }, P.calendarClassName, !!P.calendarClassName);
  }), Y = computed(function() {
    return function(e) {
      var t = function(e2) {
        return Object.assign({ type: "dot" }, e2);
      }(e);
      return { dp__marker_dot: t.type === "dot", dp__marker_line: t.type === "line" };
    };
  }), K = computed(function() {
    return function(e) {
      return lt(e, M.value);
    };
  }), U = computed(function() {
    return { dp__calendar: true, dp__calendar_next: P.multiCalendars > 0 && P.instance !== 0 };
  }), H = computed(function() {
    return E.value ? { height: "".concat(P.modeHeight, "px") } : null;
  }), G = function() {
    M.value = null;
  };
  return function(l, o2) {
    return openBlock(), createElementBlock("div", { class: normalizeClass(unref(U)) }, [createBaseVNode("div", { style: normalizeStyle(unref(H)) }, [unref(E) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(F)), role: "grid", "aria-label": "Calendar wrapper", onWheel: o2[1] || (o2[1] = withModifiers(function(e) {
      return l.$emit("handleScroll", e);
    }, ["prevent"])) }, [createBaseVNode("div", Ct, [r.weekNumbers ? (openBlock(), createElementBlock("div", At, toDisplayString(r.weekNumName), 1)) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(R), function(n, a) {
      return openBlock(), createElementBlock("div", { class: "dp__calendar_header_item", role: "gridcell", key: a }, [l.$slots["calendar-header"] ? renderSlot(l.$slots, "calendar-header", { key: 0, day: n, index: a }) : createCommentVNode("", true), l.$slots["calendar-header"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(n), 1)], 64))]);
    }), 128))]), $t, createVNode(Transition, { name: I.value, css: !!unref(V) }, { default: withCtx(function() {
      return [$.value ? (openBlock(), createElementBlock("div", Vt, [(openBlock(true), createElementBlock(Fragment, null, renderList(r.mappedDates, function(u, m) {
        return openBlock(), createElementBlock("div", { class: "dp__calendar_row", role: "row", key: m }, [r.weekNumbers ? (openBlock(), createElementBlock("div", It, [createBaseVNode("div", Tt, toDisplayString(r.getWeekNum(u.days)), 1)])) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(u.days, function(r2, u2) {
          return openBlock(), createElementBlock("div", { role: "gridcell", class: "dp__calendar_item", ref_for: true, ref: function(e) {
            e && (A.value[u2 + m] = e);
          }, key: u2 + m, "aria-selected": r2.classData.dp__active_date || r2.classData.dp__range_start || r2.classData.dp__range_start, "aria-disabled": r2.classData.dp__cell_disabled, tabindex: "0", onClick: function(e) {
            return l.$emit("selectDate", r2);
          }, onKeydown: withKeys(function(e) {
            return l.$emit("selectDate", r2);
          }, ["enter"]), onMouseover: function(e) {
            return function(e2, t) {
              var n, a;
              if (f("setHoverDate", e2), (n = e2.marker) !== null && n !== void 0 && (a = n.tooltip) !== null && a !== void 0 && a.length) {
                var r3 = ht(A.value[t]);
                if (r3) {
                  var l2 = r3.getBoundingClientRect(), o3 = l2.width, u3 = l2.height;
                  C.value = { bottom: "".concat(u3, "px"), left: "".concat(o3 / 2, "px"), transform: "translateX(-50%)" }, M.value = e2.value;
                }
              }
            }(r2, u2 + m);
          }, onMouseleave: G }, [createBaseVNode("div", { class: normalizeClass(["dp__cell_inner", r2.classData]) }, [l.$slots.day ? renderSlot(l.$slots, "day", { key: 0, day: +r2.text, date: r2.value }) : createCommentVNode("", true), l.$slots.day ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(r2.text), 1)], 64)), r2.marker ? (openBlock(), createElementBlock("div", { key: 2, class: normalizeClass(unref(Y)(r2.marker)), style: normalizeStyle(r2.marker.color ? { backgroundColor: r2.marker.color } : {}) }, null, 6)) : createCommentVNode("", true), unref(K)(r2.value) ? (openBlock(), createElementBlock("div", { key: 3, class: "dp__marker_tooltip", style: normalizeStyle(C.value) }, [createBaseVNode("div", { class: "dp__tooltip_content", onClick: o2[0] || (o2[0] = withModifiers(function() {
          }, ["stop"])) }, [(openBlock(true), createElementBlock(Fragment, null, renderList(r2.marker.tooltip, function(a, o3) {
            return openBlock(), createElementBlock("div", { key: o3, class: "dp__tooltip_text" }, [l.$slots["marker-tooltip"] ? renderSlot(l.$slots, "marker-tooltip", { key: 0, tooltop: a, day: r2.value }) : createCommentVNode("", true), l.$slots["marker-tooltip"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createBaseVNode("div", { class: "dp__tooltip_mark", style: normalizeStyle(a.color ? { backgroundColor: a.color } : {}) }, null, 4), createBaseVNode("div", null, toDisplayString(a.text), 1)], 64))]);
          }), 128)), Nt])], 4)) : createCommentVNode("", true)], 2)], 40, Bt);
        }), 128))]);
      }), 128))])) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"])], 34))], 4)], 2);
  };
} });
function Rt(e) {
  return Rt = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && typeof Symbol == "function" && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  }, Rt(e);
}
var Et = function(e, t) {
  return t;
};
var Ft = function(e) {
  return Array.isArray(e);
};
var Yt = function(e) {
  return Array.isArray(e);
};
var Kt = function(e) {
  return Array.isArray(e) && e.length === 2;
};
var Ut = function(e) {
  return typeof e == "string";
};
var Ht = { class: "dp__selection_preview" };
var Gt = { class: "dp__action_buttons" };
var Lt = ["onKeydown"];
var Wt = defineComponent({ props: { selectText: { type: String, default: "Select" }, cancelText: { type: String, default: "Cancel" }, internalModelValue: { type: [Date, Array], default: null }, range: { type: Boolean, default: false }, previewFormat: { type: [String, Function], default: function() {
  return "";
} }, inline: { type: Boolean, default: false }, monthPicker: { type: Boolean, default: false }, timePicker: { type: Boolean, default: false }, multiCalendars: { type: Number, default: 0 }, calendarWidth: { type: Number, default: 0 }, menuMount: { type: Boolean, default: false }, customProps: { type: Object, default: null }, minTime: { type: Object, default: null }, maxTime: { type: Object, default: null }, enableTimePicker: { type: Boolean, default: true }, minDate: { type: [Date, String], default: null }, maxDate: { type: [Date, String], default: null }, multiDates: { type: Boolean, default: false } }, emits: ["closePicker", "selectDate"], setup: function(r, l) {
  var o = l.emit, f = r, p = inject("formatLocale"), v = computed(function() {
    return { dp__action: true, dp__select: true, dp__action_disabled: !y.value || !h.value };
  }), y = computed(function() {
    return !f.enableTimePicker || ct(f.internalModelValue, f.maxTime, f.minTime);
  }), h = computed(function() {
    return !f.monthPicker || (e = f.internalModelValue, t = f.minDate, n = f.maxDate, a = true, t && n && (a = at(new Date(e), new Date(t)) && rt(new Date(e), new Date(n))), t && (a = at(new Date(e), new Date(t))), n && (a = rt(new Date(e), new Date(n))), a);
    var e, t, n, a;
  }), _ = function(e) {
    return nt(e, f.previewFormat, p == null ? void 0 : p.value);
  }, S = computed(function() {
    return f.internalModelValue && f.menuMount ? typeof f.previewFormat == "string" ? Ft(f.internalModelValue) ? f.internalModelValue.length === 2 && f.internalModelValue[1] ? f.multiCalendars > 0 ? "".concat(_(f.internalModelValue[0]), " - ").concat(_(f.internalModelValue[1])) : [_(f.internalModelValue[0]), _(f.internalModelValue[1])] : f.multiDates ? f.internalModelValue.map(function(e) {
      return "".concat(_(e));
    }) : "".concat(_(f.internalModelValue[0]), " -") : nt(f.internalModelValue, f.previewFormat, p == null ? void 0 : p.value) : f.timePicker ? f.previewFormat(et(f.internalModelValue)) : f.monthPicker ? f.previewFormat(Ze(f.internalModelValue)) : f.previewFormat(f.internalModelValue) : "";
  }), O = function() {
    y.value && h.value && o("selectDate");
  };
  return function(l2, o2) {
    return openBlock(), createElementBlock("div", { class: "dp__action_row", style: normalizeStyle(r.calendarWidth ? { width: "".concat(r.calendarWidth, "px") } : {}) }, [createBaseVNode("div", Ht, [l2.$slots["action-preview"] ? renderSlot(l2.$slots, "action-preview", { key: 0, value: r.internalModelValue }) : createCommentVNode("", true), l2.$slots["action-preview"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [Array.isArray(unref(S)) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [createTextVNode(toDisplayString(unref(S)), 1)], 64)), Array.isArray(unref(S)) ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(S), function(n, a) {
      return openBlock(), createElementBlock("div", { key: a }, toDisplayString(n), 1);
    }), 128)) : createCommentVNode("", true)], 64))]), createBaseVNode("div", Gt, [l2.$slots["action-select"] ? renderSlot(l2.$slots, "action-select", { key: 0, value: r.internalModelValue }) : createCommentVNode("", true), l2.$slots["action-select"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [r.inline ? createCommentVNode("", true) : (openBlock(), createElementBlock("span", { key: 0, class: "dp__action dp__cancel", tabindex: "0", onClick: o2[0] || (o2[0] = function(e) {
      return l2.$emit("closePicker");
    }), onKeydown: o2[1] || (o2[1] = withKeys(function(e) {
      return l2.$emit("closePicker");
    }, ["enter"])) }, toDisplayString(r.cancelText), 33)), createBaseVNode("span", { class: normalizeClass(unref(v)), tabindex: "0", onKeydown: withKeys(O, ["enter"]), onClick: O }, toDisplayString(r.selectText), 43, Lt)], 64))])], 4);
  };
} });
function zt(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(e);
    t && (a = a.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), n.push.apply(n, a);
  }
  return n;
}
function qt(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = arguments[t] != null ? arguments[t] : {};
    t % 2 ? zt(Object(n), true).forEach(function(t2) {
      he(e, t2, n[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : zt(Object(n)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(n, t2));
    });
  }
  return e;
}
var Jt = { class: "dp__overlay_container", role: "grid" };
var Xt = { class: "dp__selection_grid_header" };
var Zt = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var Qt = ["onKeydown"];
var en = defineComponent({ props: { items: { type: Array, default: function() {
  return [];
} }, modelValue: { type: [String, Number], default: null }, multiModelValue: { type: Array, default: function() {
  return [];
} }, disabledValues: { type: Array, default: function() {
  return [];
} }, minValue: { type: [Number, String], default: null }, maxValue: { type: [Number, String], default: null }, year: { type: Number, default: 0 }, skipActive: { type: Boolean, default: false } }, emits: ["update:modelValue", "selected", "toggle", "reset-flow"], setup: function(r, o) {
  var f = o.emit, p = r, v = ref(false), h = ref(null), _ = ref(null), g = inject("autoApply", false), S = inject("textInput", ref(false)), O = ref();
  onBeforeUpdate(function() {
    h.value = null;
  }), onMounted(function() {
    V();
    var e = ht(_);
    e && (S.value || e.focus({ preventScroll: true }), v.value = e.clientHeight < e.scrollHeight);
  });
  var x = computed(function() {
    return { dp__overlay: true };
  }), M = computed(function() {
    return { dp__overlay_col: true };
  }), C = computed(function() {
    return p.items.map(function(e) {
      return e.filter(function(e2) {
        return e2;
      }).map(function(e2) {
        var t, n, a, r2 = p.disabledValues.some(function(t2) {
          return t2 === e2.value;
        }) || $(e2.value), l = (t = p.multiModelValue) !== null && t !== void 0 && t.length ? (n = p.multiModelValue) === null || n === void 0 ? void 0 : n.some(function(t2) {
          return lt(t2, setYear(setMonth(new Date(), e2.value), p.year));
        }) : !p.skipActive && e2.value === p.modelValue;
        return qt(qt({}, e2), {}, { className: { dp__overlay_cell_active: l, dp__overlay_cell: !l, dp__overlay_cell_disabled: r2, dp__overlay_cell_active_disabled: r2 && l, dp__overlay_cell_pad: true, dp__cell_in_between: !((a = p.multiModelValue) === null || a === void 0 || !a.length) && T(e2.value) } });
      });
    });
  }), A = computed(function() {
    return { dp__button: true, dp__overlay_action: true, dp__over_action_scroll: v.value, dp__button_bottom: g };
  }), $ = function(e) {
    var t = !!p.maxValue && +e > +p.maxValue, n = !!p.minValue && +e < +p.minValue;
    return t || n;
  }, V = function() {
    var e = ht(h);
    if (e) {
      var t = ht(_);
      t && (t.scrollTop = e.offsetTop - t.offsetTop - (t.getBoundingClientRect().height / 2 - e.getBoundingClientRect().height));
    }
  }, I = function(e) {
    p.disabledValues.some(function(t) {
      return t === e;
    }) || p.minValue && !(+p.minValue <= e) || p.maxValue && !(+p.maxValue >= e) || (f("update:modelValue", e), f("selected"));
  }, T = function(e) {
    return ft(p.multiModelValue, setYear(setMonth(new Date(), O.value || 0), p.year), setYear(setMonth(new Date(), e), p.year));
  }, B = function() {
    f("toggle"), f("reset-flow");
  };
  return function(l, o2) {
    return openBlock(), createElementBlock("div", { ref_key: "gridWrapRef", ref: _, class: normalizeClass(unref(x)), role: "dialog", tabindex: "0" }, [createBaseVNode("div", Jt, [createBaseVNode("div", Xt, [renderSlot(l.$slots, "header")]), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(C), function(o3, u) {
      return openBlock(), createElementBlock("div", { class: "dp__overlay_row", key: unref(yt)(u), role: "row" }, [(openBlock(true), createElementBlock(Fragment, null, renderList(o3, function(o4) {
        return openBlock(), createElementBlock("div", { role: "gridcell", class: normalizeClass(unref(M)), key: o4.value, "aria-selected": o4.value === r.modelValue && !r.disabledValues.includes(o4.value), "aria-disabled": o4.className.dp__overlay_cell_disabled, ref_for: true, ref: function(e) {
          o4.value !== r.modelValue || r.disabledValues.includes(o4.value) || (h.value = e);
        }, tabindex: "0", onClick: function(e) {
          return I(o4.value);
        }, onKeydown: withKeys(function(e) {
          return I(o4.value);
        }, ["enter"]), onMouseover: function(e) {
          return O.value = o4.value;
        } }, [createBaseVNode("div", { class: normalizeClass(o4.className) }, [l.$slots.item ? renderSlot(l.$slots, "item", { key: 0, item: o4 }) : createCommentVNode("", true), l.$slots.item ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(o4.text), 1)], 64))], 2)], 42, Zt);
      }), 128))]);
    }), 128)), l.$slots["button-icon"] ? (openBlock(), createElementBlock("div", { key: 0, role: "button", "aria-label": "Toggle overlay", class: normalizeClass(unref(A)), tabindex: "0", onClick: B, onKeydown: withKeys(B, ["enter"]) }, [renderSlot(l.$slots, "button-icon")], 42, Qt)) : createCommentVNode("", true)])], 2);
  };
} });
var tn = function() {
  var e = inject("transitions");
  return { transitionName: computed(function() {
    return function(t) {
      return e != null && e.value ? t ? e.value.open : e.value.close : "";
    };
  }), showTransition: !(e == null || !e.value) };
};
var nn = { key: 0, class: "dp__time_input" };
var an = ["onKeydown"];
var rn = ["onKeydown"];
var ln = ["onKeydown"];
var on = { key: 2 };
var un = ["onKeydown"];
var sn = defineComponent({ props: { hours: { type: Number, default: 0 }, minutes: { type: Number, default: 0 }, seconds: { type: Number, default: 0 }, hoursGridIncrement: { type: [String, Number], default: 1 }, minutesGridIncrement: { type: [String, Number], default: 5 }, secondsGridIncrement: { type: [String, Number], default: 5 }, hoursIncrement: { type: [Number, String], default: 1 }, minutesIncrement: { type: [Number, String], default: 1 }, secondsIncrement: { type: [Number, String], default: 1 }, is24: { type: Boolean, default: true }, filters: { type: Object, default: function() {
  return {};
} }, noHoursOverlay: { type: Boolean, default: false }, noMinutesOverlay: { type: Boolean, default: false }, noSecondsOverlay: { type: Boolean, default: false }, enableSeconds: { type: Boolean, default: false }, disabled: { type: Boolean, default: false } }, emits: ["setHours", "setMinutes", "update:hours", "update:minutes", "update:seconds", "reset-flow"], setup: function(r, o) {
  var p = o.expose, m = o.emit, v = r, y = ref(false), h = ref(false), _ = ref(false), g = ref("AM"), k = tn(), P = k.transitionName, C = k.showTransition, A = computed(function() {
    return { dp__time_col: true, dp__time_col_reg: !v.enableSeconds && v.is24, dp__time_col_reg_with_button: !v.enableSeconds && !v.is24, dp__time_col_sec: v.enableSeconds && v.is24, dp__time_col_sec_with_button: v.enableSeconds && !v.is24 };
  }), $ = computed(function() {
    var e = F(v.hours);
    return { text: e < 10 ? "0".concat(e) : "".concat(e), value: e };
  }), V = computed(function() {
    return { text: v.minutes < 10 ? "0".concat(v.minutes) : "".concat(v.minutes), value: v.minutes };
  }), I = computed(function() {
    return { text: v.seconds < 10 ? "0".concat(v.seconds) : "".concat(v.seconds), value: v.seconds };
  }), T = function(e, t) {
    return function(e2, t2) {
      for (var n = [], a = 0; a < e2; a += t2)
        n.push({ value: a, text: a < 10 ? "0".concat(a) : "".concat(a) });
      return function(e3) {
        for (var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, n2 = [], a2 = 0; a2 < e3.length; a2 += t3)
          n2.push([e3[a2], e3[a2 + 1], e3[a2 + 2]]);
        return n2;
      }(n);
    }(e, +t);
  }, B = function() {
    v.noHoursOverlay || (y.value = !y.value);
  }, N = function() {
    v.noMinutesOverlay || (h.value = !h.value);
  }, j = function() {
    v.noSecondsOverlay || (_.value = !_.value);
  }, R = function(e, t) {
    return { hours: e === "hours" ? getHours(t ? ot({ hours: +v.hours }, { hours: +v.hoursIncrement }) : ut({ hours: +v.hours }, { hours: +v.hoursIncrement })) : v.hours, minutes: e === "minutes" ? getMinutes(t ? ot({ minutes: v.minutes }, { minutes: +v.minutesIncrement }) : ut({ minutes: v.minutes }, { minutes: +v.minutesIncrement })) : v.minutes, seconds: e === "seconds" ? getSeconds(t ? ot({ seconds: v.seconds }, { seconds: +v.secondsIncrement }) : ut({ seconds: v.seconds }, { seconds: +v.secondsIncrement })) : v.seconds };
  }, E = function(e) {
    var t = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], n = R(e, t), a = n[e];
    m("update:".concat(e), a);
  }, F = function(e) {
    return v.is24 ? e : (g.value = e >= 12 ? "PM" : "AM", [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][e]);
  }, Y = function() {
    g.value === "PM" ? (g.value = "AM", m("update:hours", v.hours - 12)) : (g.value = "PM", m("update:hours", v.hours + 12));
  };
  return p({ openChildCmp: function(e) {
    switch (e) {
      case "hours":
        y.value = true;
        break;
      case "minutes":
        h.value = true;
        break;
      case "seconds":
        _.value = true;
    }
  } }), function(l, o2) {
    return r.disabled ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", nn, [createBaseVNode("div", { class: normalizeClass(unref(A)) }, [createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Increment hours", tabindex: "0", onKeydown: o2[0] || (o2[0] = withKeys(function(e) {
      return E("hours");
    }, ["enter"])), onClick: o2[1] || (o2[1] = function(e) {
      return E("hours");
    }) }, [l.$slots["arrow-up"] ? renderSlot(l.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Re), { key: 1 }))], 32), createBaseVNode("div", { role: "button", "aria-label": "Open hours overlay", class: normalizeClass(r.noHoursOverlay ? "" : "dp__time_display"), tabindex: "0", onKeydown: withKeys(B, ["enter"]), onClick: B }, [l.$slots.hours ? renderSlot(l.$slots, "hours", { key: 0, text: unref($).text, value: unref($).value }) : createCommentVNode("", true), l.$slots.hours ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref($).text), 1)], 64))], 42, an), createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Decrement hours", tabindex: "0", onKeydown: o2[2] || (o2[2] = withKeys(function(e) {
      return E("hours", false);
    }, ["enter"])), onClick: o2[3] || (o2[3] = function(e) {
      return E("hours", false);
    }) }, [l.$slots["arrow-down"] ? renderSlot(l.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ye), { key: 1 }))], 32)], 2), createBaseVNode("div", { class: normalizeClass(unref(A)) }, ":", 2), createBaseVNode("div", { class: normalizeClass(unref(A)) }, [createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Increment minutes", tabindex: "0", onKeydown: o2[4] || (o2[4] = withKeys(function(e) {
      return E("minutes");
    }, ["enter"])), onClick: o2[5] || (o2[5] = function(e) {
      return E("minutes");
    }) }, [l.$slots["arrow-up"] ? renderSlot(l.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Re), { key: 1 }))], 32), createBaseVNode("div", { "aria-label": "Open minutes overlay", role: "button", class: normalizeClass(r.noMinutesOverlay ? "" : "dp__time_display"), tabindex: "0", onKeydown: withKeys(N, ["enter"]), onClick: N }, [l.$slots.minutes ? renderSlot(l.$slots, "minutes", { key: 0, text: unref(V).text, value: unref(V).value }) : createCommentVNode("", true), l.$slots.minutes ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref(V).text), 1)], 64))], 42, rn), createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Decrement minutes", tabindex: "0", onKeydown: o2[6] || (o2[6] = withKeys(function(e) {
      return E("minutes", false);
    }, ["enter"])), onClick: o2[7] || (o2[7] = function(e) {
      return E("minutes", false);
    }) }, [l.$slots["arrow-down"] ? renderSlot(l.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ye), { key: 1 }))], 32)], 2), r.enableSeconds ? (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(A)) }, ":", 2)) : createCommentVNode("", true), r.enableSeconds ? (openBlock(), createElementBlock("div", { key: 1, class: normalizeClass(unref(A)) }, [createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Increment seconds", tabindex: "0", onKeydown: o2[8] || (o2[8] = withKeys(function(e) {
      return E("seconds");
    }, ["enter"])), onClick: o2[9] || (o2[9] = function(e) {
      return E("seconds");
    }) }, [l.$slots["arrow-up"] ? renderSlot(l.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Re), { key: 1 }))], 32), createBaseVNode("div", { role: "button", "aria-label": "Open seconds overlay", class: normalizeClass(r.noSecondsOverlay ? "" : "dp__time_display"), tabindex: "0", onKeydown: withKeys(j, ["enter"]), onClick: j }, [l.$slots.seconds ? renderSlot(l.$slots, "hours", { key: 0, text: unref(I).text, value: unref(I).value }) : createCommentVNode("", true), l.$slots.seconds ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref(I).text), 1)], 64))], 42, ln), createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": "Decrement seconds", tabindex: "0", onKeydown: o2[10] || (o2[10] = withKeys(function(e) {
      return E("seconds", false);
    }, ["enter"])), onClick: o2[11] || (o2[11] = function(e) {
      return E("seconds", false);
    }) }, [l.$slots["arrow-down"] ? renderSlot(l.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true), l.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ye), { key: 1 }))], 32)], 2)) : createCommentVNode("", true), r.is24 ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", on, [l.$slots["am-pm-button"] ? renderSlot(l.$slots, "am-pm-button", { key: 0, toggle: Y, value: g.value }) : createCommentVNode("", true), l.$slots["am-pm-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", { key: 1, class: "dp__pm_am_button", role: "button", "aria-label": "Switch AM/PM mode", tabindex: "0", onClick: Y, onKeydown: withKeys(Y, ["enter"]) }, toDisplayString(g.value), 41, un))])), createVNode(Transition, { name: unref(P)(y.value), css: unref(C) }, { default: withCtx(function() {
      return [y.value ? (openBlock(), createBlock(en, { key: 0, items: T(r.is24 ? 24 : 12, r.hoursGridIncrement), "disabled-values": r.filters.times.hours, "onUpdate:modelValue": o2[12] || (o2[12] = function(e) {
        return l.$emit("update:hours", e);
      }), onSelected: B, onToggle: B, onResetFlow: o2[13] || (o2[13] = function(e) {
        return l.$emit("reset-flow");
      }) }, createSlots({ "button-icon": withCtx(function() {
        return [l.$slots["clock-icon"] ? renderSlot(l.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), l.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Be), { key: 1 }))];
      }), _: 2 }, [l.$slots["hours-overlay"] ? { name: "item", fn: withCtx(function(e) {
        var t = e.item;
        return [renderSlot(l.$slots, "hours-overlay", { text: t.text, value: t.value })];
      }) } : void 0]), 1032, ["items", "disabled-values"])) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"]), createVNode(Transition, { name: unref(P)(h.value), css: unref(C) }, { default: withCtx(function() {
      return [h.value ? (openBlock(), createBlock(en, { key: 0, items: T(60, r.minutesGridIncrement), "disabled-values": r.filters.times.minutes, "onUpdate:modelValue": o2[14] || (o2[14] = function(e) {
        return l.$emit("update:minutes", e);
      }), onSelected: N, onToggle: N, onResetFlow: o2[15] || (o2[15] = function(e) {
        return l.$emit("reset-flow");
      }) }, createSlots({ "button-icon": withCtx(function() {
        return [l.$slots["clock-icon"] ? renderSlot(l.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), l.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Be), { key: 1 }))];
      }), _: 2 }, [l.$slots["minutes-overlay"] ? { name: "item", fn: withCtx(function(e) {
        var t = e.item;
        return [renderSlot(l.$slots, "minutes-overlay", { text: t.text, value: t.value })];
      }) } : void 0]), 1032, ["items", "disabled-values"])) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"]), createVNode(Transition, { name: unref(P)(_.value), css: unref(C) }, { default: withCtx(function() {
      return [_.value ? (openBlock(), createBlock(en, { key: 0, items: T(60, r.secondsGridIncrement), "disabled-values": r.filters.times.seconds, "onUpdate:modelValue": o2[16] || (o2[16] = function(e) {
        return l.$emit("update:seconds", e);
      }), onSelected: j, onToggle: j, onResetFlow: o2[17] || (o2[17] = function(e) {
        return l.$emit("reset-flow");
      }) }, createSlots({ "button-icon": withCtx(function() {
        return [l.$slots["clock-icon"] ? renderSlot(l.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), l.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Be), { key: 1 }))];
      }), _: 2 }, [l.$slots["seconds-overlay"] ? { name: "item", fn: withCtx(function(e) {
        var t = e.item;
        return [renderSlot(l.$slots, "seconds-overlay", { text: t.text, value: t.value })];
      }) } : void 0]), 1032, ["items", "disabled-values"])) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"])]));
  };
} });
var cn = [{ name: "clock-icon", use: ["time", "calendar"] }, { name: "arrow-left", use: ["month-year", "calendar"] }, { name: "arrow-right", use: ["month-year", "calendar"] }, { name: "arrow-up", use: ["time", "calendar"] }, { name: "arrow-down", use: ["time", "calendar"] }, { name: "calendar-icon", use: ["month-year", "time", "calendar"] }, { name: "day", use: ["calendar"] }, { name: "month-overlay", use: ["calendar", "month-year"] }, { name: "year-overlay", use: ["calendar", "month-year"] }, { name: "hours-overlay", use: ["calendar", "time"] }, { name: "minutes-overlay", use: ["calendar", "time"] }, { name: "seconds-overlay", use: ["calendar", "time"] }, { name: "hours", use: ["calendar", "time"] }, { name: "minutes", use: ["calendar", "time"] }, { name: "month", use: ["calendar", "month-year"] }, { name: "year", use: ["calendar", "month-year"] }, { name: "action-select", use: ["action"] }, { name: "action-preview", use: ["action"] }, { name: "calendar-header", use: ["calendar"] }, { name: "marker-tooltip", use: ["calendar"] }, { name: "now-button", use: [] }, { name: "time-picker-overlay", use: ["calendar", "time"] }, { name: "am-pm-button", use: ["calendar", "time"] }];
var dn = [{ name: "trigger" }, { name: "input-icon" }, { name: "clear-icon" }, { name: "dp-input" }];
var fn = { all: function() {
  return cn;
}, monthYear: function() {
  return cn.filter(function(e) {
    return e.use.includes("month-year");
  });
}, input: function() {
  return dn;
}, timePicker: function() {
  return cn.filter(function(e) {
    return e.use.includes("time");
  });
}, action: function() {
  return cn.filter(function(e) {
    return e.use.includes("action");
  });
}, calendar: function() {
  return cn.filter(function(e) {
    return e.use.includes("calendar");
  });
} };
var pn = function(e, t) {
  var n = [];
  return fn[t]().forEach(function(t2) {
    e[t2.name] && n.push(t2.name);
  }), n;
};
var mn = { key: 0, class: "dp__overlay" };
var vn = { class: "dp__overlay_container" };
var yn = { key: 1, class: "dp__overlay_row" };
var hn = defineComponent({ props: { hoursIncrement: { type: [Number, String], default: 1 }, minutesIncrement: { type: [Number, String], default: 1 }, secondsIncrement: { type: [Number, String], default: 1 }, is24: { type: Boolean, default: true }, hoursGridIncrement: { type: [String, Number], default: 1 }, minutesGridIncrement: { type: [String, Number], default: 5 }, secondsGridIncrement: { type: [String, Number], default: 5 }, range: { type: Boolean, default: false }, filters: { type: Object, default: function() {
  return {};
} }, timePicker: { type: Boolean, default: false }, hours: { type: [Number, Array], default: 0 }, minutes: { type: [Number, Array], default: 0 }, seconds: { type: [Number, Array], default: 0 }, noHoursOverlay: { type: Boolean, default: false }, noMinutesOverlay: { type: Boolean, default: false }, noSecondsOverlay: { type: Boolean, default: false }, customProps: { type: Object, default: null }, enableSeconds: { type: Boolean, default: false }, fixedStart: { type: Boolean, default: false }, fixedEnd: { type: Boolean, default: false } }, emits: ["update:hours", "update:minutes", "update:seconds", "mount", "reset-flow"], setup: function(r, p) {
  var v = p.expose, h = p.emit, g = r, w = useSlots(), D = inject("autoApply", false), P = ref(null), V = tn(), I = V.transitionName, T = V.showTransition;
  onMounted(function() {
    h("mount");
  });
  var B = ref(false), N = function(e) {
    return { hours: Array.isArray(g.hours) ? g.hours[e] : g.hours, minutes: Array.isArray(g.minutes) ? g.minutes[e] : g.minutes, seconds: Array.isArray(g.seconds) ? g.seconds[e] : g.seconds };
  }, j = computed(function() {
    var e = [];
    if (g.range)
      for (var t = 0; t < 2; t++)
        e.push(N(t));
    else
      e.push(N(0));
    return e;
  }), R = function(e) {
    var t = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    t || h("reset-flow"), B.value = e, nextTick(function() {
      n !== "" && P.value && P.value.openChildCmp(n);
    });
  }, E = computed(function() {
    return { dp__button: true, dp__button_bottom: D };
  }), F = pn(w, "timePicker"), Y = computed(function() {
    return { is24: g.is24, hoursGridIncrement: g.hoursGridIncrement, minutesGridIncrement: g.minutesGridIncrement, secondsGridIncrement: g.secondsGridIncrement, hoursIncrement: g.hoursIncrement, minutesIncrement: g.minutesIncrement, secondsIncrement: g.secondsIncrement, filters: g.filters, noHoursOverlay: g.noHoursOverlay, noMinutesOverlay: g.noMinutesOverlay, noSecondsOverlay: g.noSecondsOverlay, enableSeconds: g.enableSeconds };
  }), K = function(e, t, n) {
    return g.range ? t === 0 ? [e, j.value[1][n]] : [j.value[0][n], e] : e;
  }, U = function(e) {
    h("update:hours", e);
  }, H = function(e) {
    h("update:minutes", e);
  }, G = function(e) {
    h("update:seconds", e);
  };
  return v({ toggleTimePicker: R }), function(l, o) {
    return openBlock(), createElementBlock("div", null, [r.timePicker ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(E)), role: "button", "aria-label": "Open time picker", tabindex: "0", onKeydown: o[0] || (o[0] = withKeys(function(e) {
      return R(true);
    }, ["enter"])), onClick: o[1] || (o[1] = function(e) {
      return R(true);
    }) }, [l.$slots["clock-icon"] ? renderSlot(l.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), l.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Be), { key: 1 }))], 34)), createVNode(Transition, { name: unref(I)(B.value), css: unref(T) }, { default: withCtx(function() {
      return [B.value || r.timePicker ? (openBlock(), createElementBlock("div", mn, [createBaseVNode("div", vn, [l.$slots["time-picker-overlay"] ? renderSlot(l.$slots, "time-picker-overlay", { key: 0, range: r.range, hours: r.hours, minutes: r.minutes, seconds: r.seconds, setHours: U, setMinutes: H, setSeconds: G }) : createCommentVNode("", true), l.$slots["time-picker-overlay"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", yn, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(j), function(t, n) {
        return openBlock(), createBlock(sn, mergeProps({ key: n, disabled: n === 0 ? r.fixedStart : r.fixedEnd, hours: t.hours, minutes: t.minutes, seconds: t.seconds }, unref(Y), { "onUpdate:hours": function(e) {
          return U(K(e, n, "hours"));
        }, "onUpdate:minutes": function(e) {
          return H(K(e, n, "minutes"));
        }, "onUpdate:seconds": function(e) {
          return G(K(e, n, "seconds"));
        } }), createSlots({ _: 2 }, [renderList(unref(F), function(e, t2) {
          return { name: e, fn: withCtx(function(t3) {
            return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(t3)))];
          }) };
        })]), 1040, ["disabled", "hours", "minutes", "seconds", "onUpdate:hours", "onUpdate:minutes", "onUpdate:seconds"]);
      }), 128))])), r.timePicker ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 2, class: normalizeClass(unref(E)), role: "button", "aria-label": "Close time picker", tabindex: "0", onKeydown: o[2] || (o[2] = withKeys(function(e) {
        return R(false);
      }, ["enter"])), onClick: o[3] || (o[3] = function(e) {
        return R(false);
      }) }, [l.$slots["calendar-icon"] ? renderSlot(l.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), l.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(De), { key: 1 }))], 34))])])) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"])]);
  };
} });
var _n = function(e, t) {
  var n = function t2(n2, a2) {
    var r2 = n2;
    return e.filters.months.includes(getMonth(r2)) ? t2(r2 = a2 ? addMonths(n2, 1) : subMonths(n2, 1), a2) : r2;
  }, a = function t2(n2, a2) {
    var r2 = n2;
    return e.filters.years.includes(getYear(r2)) ? t2(r2 = a2 ? addYears(n2, 1) : subYears(n2, 1), a2) : r2;
  }, r = function(t2, n2, a2) {
    return [new Date(e[t2]), set(new Date(), { month: n2, year: a2 })];
  }, l = function(e2, n2) {
    t("update:month", e2), t("update:year", n2);
  };
  return { handleMonthYearChange: function(t2) {
    var o = set(new Date(), { month: e.month, year: e.year }), u = t2 ? addMonths(o, 1) : subMonths(o, 1), i = getMonth(u), s = getYear(u);
    e.filters.months.includes(i) && (u = n(u, t2), i = getMonth(u), s = getYear(u)), e.filters.years.includes(s) && (u = a(u, t2), s = getYear(u)), function(t3, n2) {
      e.preventMinMaxNavigation && (e.minDate || e.maxDate) ? (e.maxDate && (at.apply(void 0, mt(r("maxDate", t3, n2))) || lt.apply(void 0, mt(r("maxDate", t3, n2)))) && l(t3, n2), (e.minDate && rt.apply(void 0, mt(r("minDate", t3, n2))) || lt.apply(void 0, mt(r("minDate", t3, n2)))) && l(t3, n2)) : l(t3, n2);
    }(i, s);
  } };
};
function gn(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(e);
    t && (a = a.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), n.push.apply(n, a);
  }
  return n;
}
function wn(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = arguments[t] != null ? arguments[t] : {};
    t % 2 ? gn(Object(n), true).forEach(function(t2) {
      he(e, t2, n[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : gn(Object(n)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(n, t2));
    });
  }
  return e;
}
var bn = { class: "dp__month_year_row" };
var kn = { class: "dp__inner_nav", role: "button", "aria-label": "Previous month" };
var Dn = ["onKeydown"];
var Sn = ["onKeydown"];
var On = { class: "dp__inner_nav", role: "button", "aria-label": "Next month" };
var xn = { class: "dp__month_picker_header" };
var Pn = { class: "dp__inner_nav", role: "button", "aria-label": "Previous month" };
var Mn = ["onKeydown"];
var Cn = { class: "dp__inner_nav", role: "button", "aria-label": "Next month" };
var An = defineComponent({ props: wn(wn({}, xt), {}, { minDate: { type: [Date, String], default: null }, maxDate: { type: [Date, String], default: null }, preventMinMaxNavigation: { type: Boolean, default: false }, reverseYears: { type: Boolean, default: false } }), emits: ["update:month", "update:year", "monthYearSelect", "mount", "reset-flow"], setup: function(r, o) {
  var c = o.expose, p = o.emit, m = r, v = tn(), h = v.transitionName, _ = v.showTransition, g = ref(false), k = ref(false), P = _n(m, p).handleMonthYearChange;
  onMounted(function() {
    p("mount");
  });
  var A = function(e) {
    p("update:month", e), p("monthYearSelect"), G(true);
  }, $ = function(e) {
    p("update:year", e), p("monthYearSelect", true), L(true);
  }, V = computed(function() {
    return m.minDate ? getYear(new Date(m.minDate)) : null;
  }), I = computed(function() {
    return m.maxDate ? getYear(new Date(m.maxDate)) : null;
  }), T = computed(function() {
    if (m.minDate && V.value) {
      if (V.value > m.year)
        return 12;
      if (V.value === m.year)
        return getMonth(new Date(m.minDate));
    }
    return null;
  }), B = computed(function() {
    if (m.maxDate && I.value) {
      if (I.value < m.year)
        return -1;
      if (I.value === m.year)
        return getMonth(new Date(m.maxDate));
    }
    return null;
  }), N = computed(function() {
    return m.range && m.internalModelValue && m.monthPicker ? m.internalModelValue : [];
  }), j = function(e) {
    for (var t = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], n = [], a = 0; a < e.length; a += 3) {
      var r2 = [e[a], e[a + 1], e[a + 2]];
      n.push(t ? r2.reverse() : r2);
    }
    return t ? n.reverse() : n;
  }, R = computed(function() {
    var e = m.months.find(function(e2) {
      return e2.value === m.month;
    });
    return e || { text: "", value: 0 };
  }), E = computed(function() {
    return j(m.months);
  }), K = computed(function() {
    return j(m.years, m.reverseYears);
  }), U = computed(function() {
    return !m.multiCalendars || (!!m.multiCalendarsSolo || m.instance === 0);
  }), H = computed(function() {
    return !m.multiCalendars || (!!m.multiCalendarsSolo || m.instance === m.multiCalendars - 1);
  }), G = function() {
    var e = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    W(e), g.value = !g.value;
  }, L = function() {
    var e = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    W(e), k.value = !k.value;
  }, W = function(e) {
    e || p("reset-flow");
  }, z = function() {
    var e = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    p("update:year", e ? m.year + 1 : m.year - 1);
  };
  return c({ toggleMonthPicker: G, toggleYearPicker: L }), function(r2, l) {
    return openBlock(), createElementBlock("div", bn, [r2.monthPicker ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [unref(U) ? (openBlock(), createElementBlock("div", { key: 0, class: "dp__month_year_col_nav", onClick: l[0] || (l[0] = function(e) {
      return unref(P)(false);
    }), onKeydown: l[1] || (l[1] = withKeys(function(e) {
      return unref(P)(false);
    }, ["enter"])), tabindex: "0" }, [createBaseVNode("div", kn, [r2.$slots["arrow-left"] ? renderSlot(r2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true), r2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ce), { key: 1 }))])], 32)) : createCommentVNode("", true), createBaseVNode("div", { class: "dp__month_year_select", onClick: G, onKeydown: withKeys(G, ["enter"]), role: "button", "aria-label": "Open months overlay", tabindex: "0" }, [r2.$slots.month ? renderSlot(r2.$slots, "month", { key: 0, value: unref(R).value, text: unref(R).text }) : createCommentVNode("", true), r2.$slots.month ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref(R).text), 1)], 64))], 40, Dn), createBaseVNode("div", { class: "dp__month_year_select", onClick: L, onKeydown: withKeys(L, ["enter"]), role: "button", "aria-label": "Open years overlay", tabindex: "0" }, [r2.$slots.year ? renderSlot(r2.$slots, "year", { key: 0, year: r2.year }) : createCommentVNode("", true), r2.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(r2.year), 1)], 64))], 40, Sn), createVNode(Transition, { name: unref(h)(g.value), css: unref(_) }, { default: withCtx(function() {
      return [g.value ? (openBlock(), createBlock(en, mergeProps({ key: 0 }, { modelValue: r2.month, items: unref(E), disabledValues: r2.filters.months, minValue: unref(T), maxValue: unref(B) }, { "onUpdate:modelValue": A, onToggle: G }), createSlots({ "button-icon": withCtx(function() {
        return [r2.$slots["calendar-icon"] ? renderSlot(r2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), r2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(De), { key: 1 }))];
      }), _: 2 }, [r2.$slots["month-overlay"] ? { name: "item", fn: withCtx(function(e) {
        var t = e.item;
        return [renderSlot(r2.$slots, "month-overlay", { text: t.text, value: t.value })];
      }) } : void 0]), 1040)) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"]), createVNode(Transition, { name: unref(h)(k.value), css: unref(_) }, { default: withCtx(function() {
      return [k.value ? (openBlock(), createBlock(en, mergeProps({ key: 0 }, { modelValue: r2.year, items: unref(K), disabledValues: r2.filters.years, minValue: unref(V), maxValue: unref(I) }, { "onUpdate:modelValue": $, onToggle: L }), createSlots({ "button-icon": withCtx(function() {
        return [r2.$slots["calendar-icon"] ? renderSlot(r2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), r2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(De), { key: 1 }))];
      }), _: 2 }, [r2.$slots["year-overlay"] ? { name: "item", fn: withCtx(function(e) {
        var t = e.item;
        return [renderSlot(r2.$slots, "year-overlay", { text: t.text, value: t.value })];
      }) } : void 0]), 1040)) : createCommentVNode("", true)];
    }), _: 3 }, 8, ["name", "css"]), unref(H) ? (openBlock(), createElementBlock("div", { key: 1, class: "dp__month_year_col_nav", onClick: l[2] || (l[2] = function(e) {
      return unref(P)(true);
    }), onKeydown: l[3] || (l[3] = withKeys(function(e) {
      return unref(P)(true);
    }, ["enter"])), tabindex: "0" }, [createBaseVNode("div", On, [r2.$slots["arrow-right"] ? renderSlot(r2.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true), r2.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ve), { key: 1 }))])], 32)) : createCommentVNode("", true)], 64)), r2.monthPicker ? (openBlock(), createBlock(en, mergeProps({ key: 1 }, { modelValue: r2.month, items: unref(E), disabledValues: r2.filters.months, minValue: unref(T), maxValue: unref(B), multiModelValue: unref(N), year: r2.year, skipActive: m.range }, { "onUpdate:modelValue": A, onToggle: G }), createSlots({ header: withCtx(function() {
      return [createBaseVNode("div", xn, [createBaseVNode("div", { class: "dp__month_year_col_nav", tabindex: "0", onClick: l[4] || (l[4] = function(e) {
        return z(false);
      }), onKeydown: l[5] || (l[5] = withKeys(function(e) {
        return z(false);
      }, ["enter"])) }, [createBaseVNode("div", Pn, [r2.$slots["arrow-left"] ? renderSlot(r2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true), r2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ce), { key: 1 }))])], 32), createBaseVNode("div", { class: "dp__pointer", role: "button", "aria-label": "Open years overlay", tabindex: "0", onClick: L, onKeydown: withKeys(L, ["enter"]) }, [r2.$slots.year ? renderSlot(r2.$slots, "year", { key: 0, year: r2.year }) : createCommentVNode("", true), r2.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(r2.year), 1)], 64))], 40, Mn), createBaseVNode("div", { class: "dp__month_year_col_nav", tabindex: "0", onClick: l[6] || (l[6] = function(e) {
        return z(true);
      }), onKeydown: l[7] || (l[7] = withKeys(function(e) {
        return z(true);
      }, ["enter"])) }, [createBaseVNode("div", Cn, [r2.$slots["arrow-right"] ? renderSlot(r2.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true), r2.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ve), { key: 1 }))])], 32)]), createVNode(Transition, { name: unref(h)(k.value), css: unref(_) }, { default: withCtx(function() {
        return [k.value ? (openBlock(), createBlock(en, mergeProps({ key: 0 }, { modelValue: r2.year, items: unref(K), disabledValues: r2.filters.years, minValue: unref(V), maxValue: unref(I) }, { "onUpdate:modelValue": $, onToggle: L }), createSlots({ "button-icon": withCtx(function() {
          return [r2.$slots["calendar-icon"] ? renderSlot(r2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), r2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(De), { key: 1 }))];
        }), _: 2 }, [r2.$slots["year-overlay"] ? { name: "item", fn: withCtx(function(e) {
          var t = e.item;
          return [renderSlot(r2.$slots, "year-overlay", { text: t.text, value: t.value })];
        }) } : void 0]), 1040)) : createCommentVNode("", true)];
      }), _: 3 }, 8, ["name", "css"])];
    }), _: 2 }, [r2.$slots["month-overlay"] ? { name: "item", fn: withCtx(function(e) {
      var t = e.item;
      return [renderSlot(r2.$slots, "month-overlay", { text: t.text, value: t.value })];
    }) } : void 0]), 1040)) : createCommentVNode("", true)]);
  };
} });
var $n = function(e, t, n) {
  var a = ref(new Date()), r = ref(), o = ref([{ month: getMonth(new Date()), year: getYear(new Date()) }]), i = ref(e.range ? [getHours(new Date()), getHours(new Date())] : getHours(new Date())), s = ref(e.range ? [getMinutes(new Date()), getMinutes(new Date())] : getMinutes(new Date())), c = ref(e.range ? [0, 0] : 0);
  watch(o, function() {
    setTimeout(function() {
      e.openOnTop && t("dpOpen");
    }, 0);
  }, { deep: true }), onMounted(function() {
    x(), w.value || (e.startDate && (o.value[0].month = getMonth(new Date(e.startDate)), o.value[0].year = getYear(new Date(e.startDate)), e.multiCalendars && V(0)), e.startTime && g());
  });
  var d = computed(function() {
    return function(e2) {
      return o.value[e2] ? o.value[e2].month : 0;
    };
  }), f = computed(function() {
    return function(e2) {
      return o.value[e2] ? o.value[e2].year : 0;
    };
  }), p = function(e2, t2, n2) {
    o.value[e2].month = t2, o.value[e2].year = n2;
  }, m = function(e2, t2) {
    return o.value[e2].month = t2;
  }, v = function(e2, t2) {
    return o.value[e2].year = t2;
  }, _ = function() {
    var t2 = !(arguments.length > 0 && arguments[0] !== void 0) || arguments[0];
    return e.enableSeconds ? Array.isArray(c.value) ? t2 ? c.value[0] : c.value[1] : c.value : 0;
  }, g = function() {
    var t2;
    e.startTime && (t2 = e.startTime, Array.isArray(t2) ? (i.value = [+e.startTime[0].hours, +e.startTime[1].hours], s.value = [+e.startTime[0].minutes, +e.startTime[1].minutes], e.enableSeconds && (c.value = [+e.startTime[0].seconds, +e.startTime[1].seconds])) : (i.value = +e.startTime.hours, s.value = +e.startTime.minutes, e.enableSeconds && (c.value = +e.startTime.seconds)));
  }, w = computed({ get: function() {
    return e.internalModelValue;
  }, set: function(n2) {
    e.readonly || e.disabled || t("update:internalModelValue", n2);
  } });
  watch(w, function() {
    return x();
  });
  var b = function(t2) {
    var n2 = !!e.maxDate && at(Ke(t2), Ke(new Date(e.maxDate))), a2 = !!e.minDate && rt(Ke(t2), Ke(new Date(e.minDate))), r2 = typeof e.disabledDates == "function" ? e.disabledDates(t2) : e.disabledDates.some(function(e2) {
      return lt(Ke(new Date(e2)), Ke(t2));
    }), l = e.filters.months.length ? e.filters.months.map(function(e2) {
      return +e2;
    }) : [], o2 = l.includes(getMonth(t2)), u = !!e.disabledWeekDays.length && e.disabledWeekDays.some(function(e2) {
      return +e2 === getDay(t2);
    }), i2 = !!e.allowedDates.length && !e.allowedDates.some(function(e2) {
      return lt(Ke(new Date(e2)), Ke(t2));
    }), s2 = getYear(t2), c2 = s2 < +e.yearRange[0] || s2 > +e.yearRange[1];
    return n2 || a2 || r2 || o2 || c2 || u || i2;
  }, k = function(t2) {
    return !!w.value && (!(e.hideOffsetDates && !t2.current) && (!e.range && (e.multiDates && Array.isArray(w.value) ? w.value.some(function(e2) {
      return lt(e2, t2.value);
    }) : lt(t2.value, w.value ? w.value : a.value))));
  }, D = function(t2) {
    if (m(0, getMonth(t2)), v(0, getYear(t2)), e.multiCalendars)
      for (var n2 = 1; n2 < e.multiCalendars; n2++) {
        var a2 = set(new Date(), { month: d.value(n2 - 1), year: f.value(n2 - 1) }), r2 = add(a2, { months: 1 });
        o.value.push({ month: getMonth(r2), year: getYear(r2) });
      }
  }, S = function(e2) {
    D(e2), i.value = getHours(e2), s.value = getMinutes(e2), c.value = getSeconds(e2);
  }, O = function() {
    return Array.isArray(w.value) && w.value.length ? w.value[w.value.length - 1] : null;
  }, x = function() {
    if (w.value)
      if (Ft(w.value)) {
        if (w.value.length !== 2 || e.multiDates) {
          if (Ft(w.value) && e.multiDates) {
            var t2 = w.value[w.value.length - 1];
            t2 && S(t2);
          }
        } else
          D(w.value[0]), i.value = [getHours(w.value[0]), w.value[1] ? getHours(w.value[1]) : getHours(new Date())], s.value = [getMinutes(w.value[0]), w.value[1] ? getMinutes(w.value[1]) : getMinutes(new Date())], c.value = [getSeconds(w.value[0]), w.value[1] ? getSeconds(w.value[1]) : getSeconds(new Date())];
        e.multiCalendars && e.multiCalendarsSolo && function() {
          if (Array.isArray(w.value) && w.value.length === 2) {
            var t3 = new Date(w.value[1] ? w.value[1] : addMonths(w.value[0], 1));
            getMonth(w.value[0]) !== getMonth(w.value[1]) && e.multiCalendarsSolo && (m(1, getMonth(t3)), v(1, getYear(t3)));
          }
        }();
      } else
        S(w.value);
    else
      e.timePicker ? (g(), e.range ? Yt(i.value) && Yt(s.value) && (w.value = [Le(new Date(), i.value[0], s.value[0], _()), Le(new Date(), i.value[1], s.value[1], _(false))]) : w.value = Le(new Date(), i.value, s.value, _())) : e.monthPicker && !e.range ? w.value = ze(new Date(), d.value(0), f.value(0)) : e.multiCalendars && D(new Date());
  }, P = function(t2) {
    var n2 = getMonth(new Date(t2)), a2 = getYear(new Date(t2));
    if (m(0, n2), v(0, a2), e.multiCalendars > 0)
      for (var r2 = 1; r2 < e.multiCalendars; r2++) {
        var l = We(set(new Date(t2), { year: d.value(r2 - 1), month: f.value(r2 - 1) }));
        m(r2, l.month), v(r2, l.year);
      }
  }, M = function(t2) {
    if (w.value && Array.isArray(w.value))
      if (w.value.some(function(e2) {
        return lt(t2, e2);
      })) {
        var n2 = w.value.filter(function(e2) {
          return !lt(e2, t2);
        });
        w.value = n2.length ? n2 : null;
      } else
        (e.multiDatesLimit && +e.multiDatesLimit > w.value.length || !e.multiDatesLimit) && w.value.push(t2);
    else
      w.value = [t2];
  }, C = function(t2) {
    if (Array.isArray(w.value) && w.value[0]) {
      var n2 = differenceInCalendarDays(t2, w.value[0]), a2 = Math.abs(n2 < 0 ? n2 + 1 : n2 - 1);
      if (e.minRange && e.maxRange)
        return a2 >= +e.minRange && a2 <= +e.maxRange;
      if (e.minRange)
        return a2 >= +e.minRange;
      if (e.maxRange)
        return a2 <= +e.maxRange;
    }
    return true;
  }, A = function(t2) {
    return Array.isArray(w.value) && w.value.length === 2 ? e.fixedStart && (at(t2, w.value[0]) || lt(t2, w.value[0])) ? [w.value[0], t2] : e.fixedEnd && (rt(t2, w.value[1]) || lt(t2, w.value[1])) ? [t2, w.value[1]] : w.value : [];
  }, $ = function() {
    e.autoApply && t("autoApply");
  }, V = function(t2) {
    for (var n2 = t2 - 1; n2 >= 0; n2--) {
      var a2 = subMonths(set(new Date(), { month: d.value(n2 + 1), year: f.value(n2 + 1) }), 1);
      p(n2, getMonth(a2), getYear(a2));
    }
    for (var r2 = t2 + 1; r2 <= e.multiCalendars - 1; r2++) {
      var l = addMonths(set(new Date(), { month: d.value(r2 - 1), year: f.value(r2 - 1) }), 1);
      p(r2, getMonth(l), getYear(l));
    }
  }, I = function(e2) {
    return ze(new Date(), d.value(e2), f.value(e2));
  }, T = function(e2) {
    return Le(e2, i.value, s.value, _());
  }, B = function(n2) {
    Ft(n2) && Ft(w.value) && Yt(i.value) && Yt(s.value) ? (n2[0] && w.value[0] && (w.value[0] = Le(n2[0], i.value[0], s.value[0], _())), n2[1] && w.value[1] && (w.value[1] = Le(n2[1], i.value[1], s.value[1], _(false)))) : e.multiDates && Array.isArray(w.value) ? w.value[w.value.length - 1] = T(n2) : e.range || Kt(n2) || (w.value = T(n2)), t("timeUpdate");
  }, N = function(t2) {
    return !(Et(w.value, e.range) && w.value[0] && r.value) || (t2 ? at(r.value, w.value[0]) : rt(r.value, w.value[0]));
  }, j = function(t2) {
    var n2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
    return (e.range || e.weekPicker) && Kt(w.value) ? !(e.hideOffsetDates && !t2.current) && lt(new Date(t2.value), w.value[n2 ? 0 : 1]) : !!e.range && (lt(new Date(t2.value), w.value && Array.isArray(w.value) ? n2 ? w.value[0] || null : w.value[1] : null) && (!n2 || !rt(r.value || null, Array.isArray(w.value) ? w.value[0] : null)) || lt(t2.value, Array.isArray(w.value) ? w.value[0] : null) && N(n2));
  }, R = function(t2, n2) {
    var a2 = set(new Date(), { month: d.value(n2), year: f.value(n2) }), r2 = t2 < 0 ? addMonths(a2, 1) : subMonths(a2, 1);
    p(n2, getMonth(r2), getYear(r2)), e.multiCalendars && !e.multiCalendarsSolo && V(n2);
  };
  return { today: a, hours: i, minutes: s, seconds: c, month: d, year: f, monthYearSelect: function() {
    var n2 = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    e.autoApply && e.monthPicker && t("autoApply", n2);
  }, isDisabled: b, updateTime: function(t2) {
    var a2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], r2 = arguments.length > 2 && arguments[2] !== void 0 && arguments[2], l = a2 ? t2 : i.value, o2 = a2 || r2 ? s.value : t2, u = r2 ? t2 : c.value;
    if (e.range && Kt(w.value) && Yt(l) && Yt(o2) && Yt(u)) {
      var d2 = function(e2) {
        return Le(w.value[e2], l[e2], o2[e2], u[e2]);
      }, f2 = function(e2) {
        return setMilliseconds(w.value[e2], 0);
      };
      if (lt(w.value[0], w.value[1]) && (isAfter(d2(0), f2(1)) || isBefore(d2(1), f2(0))))
        return;
    }
    if (i.value = l, s.value = o2, c.value = u, w.value)
      if (e.multiDates) {
        var p2 = O();
        p2 && B(p2);
      } else
        B(w.value);
    else
      e.timePicker && B(e.range ? [new Date(), new Date()] : new Date());
    n();
  }, setHoverDate: function(t2) {
    !t2.current && e.hideOffsetDates || (r.value = t2.value);
  }, getWeekNum: function(e2) {
    var t2 = e2.find(function(e3) {
      return e3.current;
    });
    return t2 ? getISOWeek(t2.value) : "";
  }, selectDate: function(a2) {
    var r2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
    if (!b(a2.value) && (a2.current || !e.hideOffsetDates)) {
      if (e.weekPicker)
        return w.value = pt(new Date(a2.value), +e.weekStart), $();
      if (e.range || Yt(i.value) || Yt(s.value)) {
        if (Yt(i.value) && Yt(s.value) && !e.multiDates) {
          var l = w.value ? w.value.slice() : [];
          l.length !== 2 || e.fixedStart || e.fixedEnd || (l = []), e.autoRange ? (r2 && P(a2.value), l = [new Date(a2.value), addDays(new Date(a2.value), +e.autoRange)]) : e.fixedStart || e.fixedEnd ? l = A(new Date(a2.value)) : l[0] ? C(new Date(a2.value)) && (rt(new Date(a2.value), new Date(l[0])) ? l.unshift(new Date(a2.value)) : l[1] = new Date(a2.value)) : l[0] = new Date(a2.value), l[0] && !l[1] ? l[0] = Le(l[0], i.value[0], s.value[0], _()) : (l[0] = Le(l[0], i.value[0], s.value[0], _()), l[1] = Le(l[1], i.value[1], s.value[1], _(false)), n()), w.value = l, l[0] && l[1] && e.autoApply && t("autoApply");
        }
      } else {
        var o2 = Le(new Date(a2.value), i.value, s.value, _());
        e.multiDates ? M(o2) : w.value = o2, n(), $();
      }
    }
  }, rangeActive: function(e2) {
    return ft(w.value, r.value, e2.value);
  }, isActiveDate: k, updateMonthYear: function(a2, r2) {
    var l = !(arguments.length > 2 && arguments[2] !== void 0) || arguments[2];
    if (l ? m(a2, r2) : v(a2, r2), e.multiCalendars && !e.multiCalendarsSolo && V(a2), e.monthPicker)
      if (e.range) {
        if (l) {
          var o2 = w.value ? w.value.slice() : [];
          o2.length === 2 && (o2 = []), o2.length ? rt(I(a2), o2[0]) ? o2.unshift(I(a2)) : o2.push(I(a2)) : o2 = [I(a2)], w.value = o2;
        }
      } else
        w.value = I(a2);
    n(), t("updateMonthYear", { instance: a2, value: r2, isMonth: l });
  }, isHoverRangeEnd: function(t2) {
    if (e.autoRange || e.weekPicker) {
      if (r.value) {
        if (e.hideOffsetDates && !t2.current)
          return false;
        var n2 = addDays(r.value, +e.autoRange), a2 = pt(new Date(r.value), +e.weekStart);
        return e.weekPicker ? lt(a2[1], new Date(t2.value)) : lt(n2, new Date(t2.value));
      }
      return false;
    }
    return false;
  }, isAutoRangeInBetween: function(t2) {
    if (e.autoRange || e.weekPicker) {
      if (r.value) {
        var n2 = addDays(r.value, +e.autoRange);
        if (e.hideOffsetDates && !t2.current)
          return false;
        var a2 = pt(new Date(r.value), +e.weekStart);
        return e.weekPicker ? at(t2.value, a2[0]) && rt(t2.value, a2[1]) : at(t2.value, r.value) && rt(t2.value, n2);
      }
      return false;
    }
    return false;
  }, isAutoRangeStart: function(t2) {
    if (e.autoRange || e.weekPicker) {
      if (r.value) {
        if (e.hideOffsetDates && !t2.current)
          return false;
        var n2 = pt(new Date(r.value), +e.weekStart);
        return e.weekPicker ? lt(n2[0], t2.value) : lt(r.value, t2.value);
      }
      return false;
    }
    return false;
  }, clearHoverDate: function() {
    r.value = null;
  }, rangeActiveStartEnd: j, handleScroll: function(t2, n2) {
    e.monthChangeOnScroll && R(e.monthChangeOnScroll === "inverse" ? -t2.deltaY : t2.deltaY, n2);
  }, getMarker: function(t2) {
    return e.markers.find(function(e2) {
      return lt(Ke(new Date(t2.value)), Ke(new Date(e2.date)));
    });
  }, handleArrow: function(t2, n2) {
    e.monthChangeOnArrows && R(t2 === "right" ? -1 : 1, n2);
  }, selectCurrentDate: function() {
    e.range ? Et(w.value, e.range) && (w.value && w.value[0] ? w.value = rt(new Date(), w.value[0]) ? [new Date(), w.value[0]] : [w.value[0], new Date()] : w.value = [new Date()]) : t("update:internalModelValue", new Date()), e.autoApply && t("selectDate");
  }, isHoverDate: function(t2, n2) {
    return !(Array.isArray(e.internalModelValue) && e.internalModelValue.length || e.weekPicker) && !(t2 || k(n2) || !n2.current && e.hideOffsetDates || e.range && (j(n2) || j(n2, false)));
  }, isHoverDateStartEnd: function(t2, n2, a2) {
    return !(!Array.isArray(e.internalModelValue) || !e.internalModelValue[0] || e.internalModelValue.length !== 1) && (!t2 && (a2 ? at(e.internalModelValue[0], n2.value) : rt(e.internalModelValue[0], n2.value)));
  }, presetDateRange: function(n2) {
    n2.length && n2.length <= 2 && e.range && (w.value = n2.map(function(e2) {
      return new Date(e2);
    }), e.autoApply && t("selectDate"));
  } };
};
function Vn(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(e);
    t && (a = a.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), n.push.apply(n, a);
  }
  return n;
}
function In(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = arguments[t] != null ? arguments[t] : {};
    t % 2 ? Vn(Object(n), true).forEach(function(t2) {
      he(e, t2, n[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Vn(Object(n)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(n, t2));
    });
  }
  return e;
}
var Tn;
var Bn = ["id", "onKeydown"];
var Nn = { key: 0, class: "dp__preset_ranges" };
var jn = ["onClick"];
var Rn = { key: 1, class: "dp__now_wrap" };
var En = defineComponent({ props: In(In({}, St), {}, { internalModelValue: { type: [Date, Array], default: null }, multiCalendars: { type: Number, default: 0 }, previewFormat: { type: [String, Function], default: function() {
  return null;
} }, filters: { type: Object, default: function() {
  return {};
} }, openOnTop: { type: Boolean, default: false } }), emits: ["update:internalModelValue", "closePicker", "selectDate", "dpOpen", "autoApply", "timeUpdate", "flow-step", "updateMonthYear"], setup: function(r, p) {
  var m = p.emit, v = r, h = useSlots(), g = ref(null), D = reactive({ timePicker: !v.enableTimePicker, monthYearInput: false, calendar: false }), O = ref([]), P = ref(null), B = ref(null), N = ref(0), j = ref(false), R = ref(0);
  onMounted(function() {
    var e;
    j.value = true, (e = v.presetRanges) !== null && e !== void 0 && e.length || ke2(), v.inline || nextTick(function() {
      return m("dpOpen");
    });
    var t = ht(B);
    if (!t || v.textInput || v.inline || t.focus({ preventScroll: true }), t) {
      var n = function(e2) {
        e2.stopImmediatePropagation(), e2.stopPropagation();
      };
      t.addEventListener("pointerdown", n), t.addEventListener("mousedown", n);
    }
    document.addEventListener("resize", ke2);
  }), onUnmounted(function() {
    document.removeEventListener("resize", ke2);
  });
  var E = function() {
    R.value = -1;
  }, F = $n(v, m, function() {
    var e;
    (e = v.flow) !== null && e !== void 0 && e.length && R.value !== -1 && (R.value += 1, m("flow-step", R.value), Re2());
  }), Y = F.updateTime, K = F.updateMonthYear, U = F.today, H = F.month, G = F.year, L = F.hours, W = F.minutes, z = F.seconds, q = F.isDisabled, J = F.isActiveDate, X = F.selectDate, Z = F.getWeekNum, Q = F.setHoverDate, ee = F.isHoverRangeEnd, te = F.isAutoRangeInBetween, ne = F.isAutoRangeStart, ae = F.rangeActive, re = F.clearHoverDate, le = F.rangeActiveStartEnd, oe = F.monthYearSelect, ue = F.handleScroll, ie = F.handleArrow, se = F.getMarker, ce = F.selectCurrentDate, de = F.isHoverDateStartEnd, fe = F.isHoverDate, pe = F.presetDateRange, me = pn(h, "calendar"), ve = pn(h, "action"), ye = pn(h, "timePicker"), _e2 = pn(h, "monthYear"), ge2 = computed(function() {
    return v.openOnTop ? "dp__arrow_bottom" : "dp__arrow_top";
  }), we2 = computed(function() {
    return function(e) {
      for (var t = [], n = +e[0]; n <= +e[1]; n++)
        t.push({ value: +n, text: "".concat(n) });
      return t;
    }(v.yearRange);
  }), be2 = computed(function() {
    return function(e, t) {
      var n = new Intl.DateTimeFormat(e, { month: t, timeZone: "UTC" });
      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(function(e2) {
        var t2 = e2 < 10 ? "0".concat(e2) : e2;
        return new Date("2017-".concat(t2, "-01T00:00:00+00:00"));
      }).map(function(e2, t2) {
        return { text: n.format(e2), value: t2 };
      });
    }(v.locale, v.monthNameFormat);
  }), ke2 = function() {
    var e = ht(g);
    e && (N.value = e.getBoundingClientRect().width);
  }, De2 = computed(function() {
    return function(e) {
      return vt(H.value(e), G.value(e), +v.weekStart, v.hideOffsetDates);
    };
  }), Se2 = computed(function() {
    return v.multiCalendars > 0 && v.range ? mt(Array(v.multiCalendars).keys()) : [0];
  }), Oe2 = computed(function() {
    return function(e) {
      return e === 1;
    };
  }), xe2 = computed(function() {
    return v.monthPicker || v.timePicker;
  }), Pe2 = computed(function() {
    return { dp__flex_display: v.multiCalendars > 0 };
  }), Me2 = computed(function() {
    return { dp__instance_calendar: v.multiCalendars > 0 };
  }), Ce2 = computed(function() {
    return { dp__menu_disabled: v.disabled, dp__menu_readonly: v.readonly };
  }), Ae2 = computed(function() {
    return function(e) {
      return Ie2(De2, e);
    };
  }), $e2 = computed(function() {
    return { locale: v.locale, weekNumName: v.weekNumName, weekStart: v.weekStart, weekNumbers: v.weekNumbers, enableTimePicker: v.enableTimePicker, disableMonthYearSelect: v.disableMonthYearSelect, monthPicker: v.monthPicker, timePicker: v.timePicker, range: v.range, filters: v.filters, minTime: v.minTime, maxTime: v.maxTime, minDate: v.minDate, maxDate: v.maxDate, customProps: v.customProps, calendarClassName: v.calendarClassName, specificMode: xe2.value, getWeekNum: Z, multiCalendars: v.multiCalendars, months: be2.value, years: we2.value, multiCalendarsSolo: v.multiCalendarsSolo, modeHeight: v.modeHeight, internalModelValue: v.internalModelValue };
  }), Ve2 = computed(function() {
    return he({ dp__menu: true, dp__menu_index: !v.inline, dp__relative: v.inline }, v.menuClassName, !!v.menuClassName);
  }), Ie2 = function(e, t) {
    return e.value(t).map(function(e2) {
      return In(In({}, e2), {}, { days: e2.days.map(function(e3) {
        var t2 = q(e3.value), n = fe(t2, e3);
        return e3.marker = se(e3), e3.classData = he({ dp__cell_offset: !e3.current, dp__pointer: !(t2 || !e3.current && v.hideOffsetDates), dp__active_date: !v.range && J(e3), dp__date_hover: n, dp__date_hover_start: de(n, e3, true), dp__date_hover_end: de(n, e3, false), dp__range_between: !(!v.range && !v.weekPicker || v.multiCalendars > 0 && !e3.current || t2 || !e3.current && v.hideOffsetDates || J(e3)) && ae(e3), dp__today: !v.noToday && lt(e3.value, U.value), dp__cell_disabled: t2, dp__cell_auto_range: te(e3), dp__cell_auto_range_start: ne(e3), dp__cell_auto_range_end: ee(e3), dp__range_start: v.multiCalendars > 0 ? e3.current && le(e3) : le(e3), dp__range_end: v.multiCalendars > 0 ? e3.current && le(e3, false) : le(e3, false) }, v.calendarCellClassName, !!v.calendarCellClassName), e3;
      }) });
    });
  }, Te2 = function(e) {
    e.stopPropagation(), e.preventDefault(), e.stopImmediatePropagation();
  }, Be2 = function() {
    v.escClose && m("closePicker");
  }, Ne2 = function(e) {
    e.stopImmediatePropagation(), e.preventDefault(), v.spaceConfirm && m("selectDate");
  }, je2 = function(e) {
    var t;
    (t = v.flow) !== null && t !== void 0 && t.length && (D[e] = true, Object.keys(D).filter(function(e2) {
      return !D[e2];
    }).length || Re2());
  }, Re2 = function() {
    v.flow[R.value] === "month" && O.value[0] && O.value[0].toggleMonthPicker(true), v.flow[R.value] === "year" && O.value && O.value[0].toggleYearPicker(true), v.flow[R.value] === "calendar" && P.value && P.value.toggleTimePicker(false, true), v.flow[R.value] === "time" && P.value && P.value.toggleTimePicker(true, true);
    var e = v.flow[R.value];
    e !== "hours" && e !== "minutes" && e !== "seconds" || P.value && P.value.toggleTimePicker(true, true, e);
  };
  return function(l, o) {
    return openBlock(), createElementBlock("div", { id: l.uid ? "dp-menu-".concat(l.uid) : void 0, tabindex: "0", ref_key: "dpMenuRef", ref: B, role: "dialog", "aria-label": "Datepicker menu", class: normalizeClass(unref(Ve2)), onMouseleave: o[11] || (o[11] = function() {
      return unref(re) && unref(re).apply(void 0, arguments);
    }), onClick: Te2, onKeydown: [withKeys(Be2, ["esc"]), withKeys(Ne2, ["space"]), o[12] || (o[12] = withKeys(function(e) {
      return unref(ie)("left", 0);
    }, ["left"])), o[13] || (o[13] = withKeys(function(e) {
      return unref(ie)("right", 0);
    }, ["right"]))] }, [(l.disabled || l.readonly) && l.inline ? (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(Ce2)) }, null, 2)) : createCommentVNode("", true), l.inline ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 1, class: normalizeClass(unref(ge2)) }, null, 2)), createBaseVNode("div", { class: normalizeClass(l.presetRanges.length ? "dp__menu_content_wrapper" : null) }, [l.presetRanges.length ? (openBlock(), createElementBlock("div", Nn, [(openBlock(true), createElementBlock(Fragment, null, renderList(l.presetRanges, function(n, r2) {
      return openBlock(), createElementBlock("div", { key: r2, class: "dp__preset_range", onClick: function(e) {
        return unref(pe)(n.range);
      } }, toDisplayString(n.label), 9, jn);
    }), 128))])) : createCommentVNode("", true), createBaseVNode("div", { class: "dp__instance_calendar", ref_key: "calendarWrapperRef", ref: g, role: "document" }, [createBaseVNode("div", { class: normalizeClass(unref(Pe2)) }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(Se2), function(n, u) {
      return openBlock(), createElementBlock("div", { key: n, class: normalizeClass(unref(Me2)) }, [l.disableMonthYearSelect || l.timePicker ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(l.monthYearComponent ? l.monthYearComponent : An), mergeProps({ key: 0, ref_for: true, ref: function(e) {
        e && (O.value[u] = e);
      } }, { months: unref(be2), years: unref(we2), filters: r.filters, monthPicker: l.monthPicker, month: unref(H)(n), year: unref(G)(n), customProps: l.customProps, multiCalendars: r.multiCalendars, multiCalendarsSolo: l.multiCalendarsSolo, instance: n, minDate: l.minDate, maxDate: l.maxDate, preventMinMaxNavigation: l.preventMinMaxNavigation, internalModelValue: r.internalModelValue, range: l.range, reverseYears: l.reverseYears }, { onMount: o[0] || (o[0] = function(e) {
        return je2("monthYearInput");
      }), onResetFlow: E, "onUpdate:month": function(e) {
        return unref(K)(n, e, true);
      }, "onUpdate:year": function(e) {
        return unref(K)(n, e, false);
      }, onMonthYearSelect: unref(oe) }), createSlots({ _: 2 }, [renderList(unref(_e2), function(e, t) {
        return { name: e, fn: withCtx(function(t2) {
          return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(t2)))];
        }) };
      })]), 1040, ["onUpdate:month", "onUpdate:year", "onMonthYearSelect"])), createVNode(jt, mergeProps(unref($e2), { "flow-step": R.value, "onUpdate:flow-step": o[1] || (o[1] = function(e) {
        return R.value = e;
      }), instance: n, "mapped-dates": unref(Ae2)(n), month: unref(H)(n), year: unref(G)(n), "month-year-component": l.monthYearComponent, onSelectDate: function(e) {
        return unref(X)(e, !unref(Oe2)(n));
      }, onSetHoverDate: o[2] || (o[2] = function(e) {
        return unref(Q)(e);
      }), onHandleScroll: function(e) {
        return unref(ue)(e, n);
      }, onMount: o[3] || (o[3] = function(e) {
        return je2("calendar");
      }), onResetFlow: E }), createSlots({ _: 2 }, [renderList(unref(me), function(e, t) {
        return { name: e, fn: withCtx(function(t2) {
          return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(In({}, t2))))];
        }) };
      })]), 1040, ["flow-step", "instance", "mapped-dates", "month", "year", "month-year-component", "onSelectDate", "onHandleScroll"])], 2);
    }), 128))], 2), createBaseVNode("div", null, [!l.enableTimePicker || l.monthPicker || l.weekPicker ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(l.timePickerComponent ? l.timePickerComponent : hn), mergeProps({ key: 0, ref_key: "timePickerRef", ref: P }, { is24: l.is24, hoursIncrement: l.hoursIncrement, minutesIncrement: l.minutesIncrement, hoursGridIncrement: l.hoursGridIncrement, secondsIncrement: l.secondsIncrement, minutesGridIncrement: l.minutesGridIncrement, secondsGridIncrement: l.secondsGridIncrement, noHoursOverlay: l.noHoursOverlay, noMinutesOverlay: l.noMinutesOverlay, noSecondsOverlay: l.noSecondsOverlay, range: l.range, filters: r.filters, timePicker: l.timePicker, hours: unref(L), minutes: unref(W), seconds: unref(z), customProps: l.customProps, enableSeconds: l.enableSeconds, fixedStart: l.fixedStart, fixedEnd: l.fixedEnd }, { onMount: o[4] || (o[4] = function(e) {
      return je2("timePicker");
    }), "onUpdate:hours": o[5] || (o[5] = function(e) {
      return unref(Y)(e);
    }), "onUpdate:minutes": o[6] || (o[6] = function(e) {
      return unref(Y)(e, false);
    }), "onUpdate:seconds": o[7] || (o[7] = function(e) {
      return unref(Y)(e, false, true);
    }), onResetFlow: E }), createSlots({ _: 2 }, [renderList(unref(ye), function(e, t) {
      return { name: e, fn: withCtx(function(t2) {
        return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(t2)))];
      }) };
    })]), 1040))])], 512), l.showNowButton ? (openBlock(), createElementBlock("div", Rn, [l.$slots["now-button"] ? renderSlot(l.$slots, "now-button", { key: 0, selectCurrentDate: unref(ce) }) : createCommentVNode("", true), l.$slots["now-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", { key: 1, type: "button", role: "button", class: "dp__now_button", onClick: o[8] || (o[8] = function() {
      return unref(ce) && unref(ce).apply(void 0, arguments);
    }) }, toDisplayString(l.nowButtonLabel), 1))])) : createCommentVNode("", true)], 2), !l.autoApply || l.keepActionRow ? (openBlock(), createBlock(resolveDynamicComponent(l.actionRowComponent ? l.actionRowComponent : Wt), mergeProps({ key: 2 }, { calendarWidth: N.value, selectText: l.selectText, cancelText: l.cancelText, internalModelValue: r.internalModelValue, range: l.range, previewFormat: r.previewFormat, inline: l.inline, monthPicker: l.monthPicker, timePicker: l.timePicker, customProps: l.customProps, multiCalendars: r.multiCalendars, menuMount: j.value, maxTime: l.maxTime, minTime: l.minTime, enableTimePicker: l.enableTimePicker, minDate: l.minDate, maxDate: l.maxDate, multiDates: l.multiDates }, { onClosePicker: o[9] || (o[9] = function(e) {
      return l.$emit("closePicker");
    }), onSelectDate: o[10] || (o[10] = function(e) {
      return l.$emit("selectDate");
    }) }), createSlots({ _: 2 }, [renderList(unref(ve), function(e, t) {
      return { name: e, fn: withCtx(function(t2) {
        return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(In({}, t2))))];
      }) };
    })]), 1040)) : createCommentVNode("", true)], 42, Bn);
  };
} });
!function(e) {
  e.center = "center", e.left = "left", e.right = "right";
}(Tn || (Tn = {}));
var Fn = function(e, t, n, a, r, o, u, i, s, c, d, f, p, m) {
  var v = ref(""), y = ref();
  watch(y, function() {
    m("internalModelChange", y.value);
  });
  var _ = function() {
    if (y.value)
      if (e && typeof e != "string")
        v.value = e(t ? et(y.value) : n ? Qe(y.value) : y.value);
      else {
        var a2 = Je(e, o, i, n, t, f, u);
        Array.isArray(y.value) && c ? v.value = y.value.map(function(e2) {
          return nt(e2, a2, s == null ? void 0 : s.value);
        }).join("; ") : v.value = nt(y.value, a2, s == null ? void 0 : s.value, p.rangeSeparator);
      }
    else
      v.value = "";
  };
  return { parseExternalModelValue: function(e2) {
    var l = null;
    e2 ? t ? function(e3) {
      return Array.isArray(e3) && e3.length === 2;
    }(e2) && "hours" in e2[0] && "minutes" in e2[0] ? l = [Le(null, +e2[0].hours, +e2[0].minutes, +e2[0].seconds), Le(null, +e2[1].hours, +e2[1].minutes, +e2[1].seconds)] : function(e3) {
      return Rt(e3) === "object";
    }(e2) && (l = Le(null, +e2.hours, +e2.minutes, +e2.seconds)) : n ? function(e3) {
      return Array.isArray(e3);
    }(e2) && "month" in e2[0] && "year" in e2[0] ? l = [ze(null, +e2[0].month, +e2[0].year), e2[1] ? ze(null, +e2[1].month, +e2[1].year) : null] : function(e3) {
      return Rt(e3) === "object";
    }(e2) && "month" in e2 && "year" in e2 && (l = ze(null, +e2.month, +e2.year)) : c && Array.isArray(e2) ? l = e2.map(function(e3) {
      return new Date(e3);
    }) : f && Array.isArray(e2) ? l = [new Date(e2[0]), new Date(e2[1])] : a ? function(e3, t2) {
      return t2 ? Array.isArray(e3) : Kt(e3);
    }(e2, r) && (l = [new Date(e2[0]), e2[1] ? new Date(e2[1]) : null]) : function(e3) {
      return typeof e3 == "string" || Rt(e3) === "object";
    }(e2) && (l = new Date(e2)) : l = null, Ge(l) ? (y.value = l, _()) : (y.value = null, v.value = "");
  }, formatInputValue: _, internalModelValue: y, inputValue: v, emitModelValue: function() {
    if (n)
      m("update:modelValue", Qe(y.value));
    else if (t)
      m("update:modelValue", et(y.value));
    else if (f)
      m("update:modelValue", y.value);
    else {
      y.value && a && r && y.value.length === 1 && y.value.push(null);
      var e2 = d ? Array.isArray(y.value) ? y.value.map(function(e3) {
        return e3 ? dt(e3) : e3;
      }) : dt(y.value) : y.value;
      m("update:modelValue", e2);
    }
    _();
  }, checkBeforeEmit: function() {
    return !!y.value && (a ? r ? y.value.length >= 1 : y.value.length === 2 : !!y.value);
  } };
};
var Yn = typeof window != "undefined" ? window : void 0;
var Kn = function() {
};
var Un = function(e, t, n, r) {
  if (!e)
    return Kn;
  var l, o = Kn, u = watch(function() {
    return unref(e);
  }, function(e2) {
    o(), e2 && (e2.addEventListener(t, n, r), o = function() {
      e2.removeEventListener(t, n, r), o = Kn;
    });
  }, { immediate: true, flush: "post" }), i = function() {
    u(), o();
  };
  return l = i, getCurrentScope() && onScopeDispose(l), i;
};
function Hn(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(e);
    t && (a = a.filter(function(t2) {
      return Object.getOwnPropertyDescriptor(e, t2).enumerable;
    })), n.push.apply(n, a);
  }
  return n;
}
function Gn(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = arguments[t] != null ? arguments[t] : {};
    t % 2 ? Hn(Object(n), true).forEach(function(t2) {
      he(e, t2, n[t2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Hn(Object(n)).forEach(function(t2) {
      Object.defineProperty(e, t2, Object.getOwnPropertyDescriptor(n, t2));
    });
  }
  return e;
}
var Ln = defineComponent({ props: Gn(Gn({}, St), {}, { name: { type: String, default: null }, multiCalendars: { type: [Boolean, Number, String], default: null }, modelValue: { type: [String, Date, Array, Object], default: null }, position: { type: String, default: "center" }, placeholder: { type: String, default: null }, dark: { type: Boolean, default: false }, required: { type: Boolean, default: false }, format: { type: [String, Function], default: function() {
  return null;
} }, previewFormat: { type: [String, Function], default: function() {
  return null;
} }, inputClassName: { type: String, default: null }, hideInputIcon: { type: Boolean, default: false }, state: { type: Boolean, default: null }, clearable: { type: Boolean, default: true }, closeOnScroll: { type: Boolean, default: false }, filters: { type: Object, default: function() {
  return {};
} }, inlineWithInput: { type: Boolean, default: false }, autoPosition: { type: Boolean, default: true }, closeOnAutoApply: { type: Boolean, default: true }, textInputOptions: { type: Object, default: function() {
  return {};
} }, teleport: { type: String, default: "body" }, altPosition: { type: [Boolean, Function], default: false }, partialRange: { type: Boolean, default: true }, transitions: { type: Boolean, default: true }, openMenuOnFocus: { type: Boolean, default: true }, formatLocale: { type: Object, default: null }, autocomplete: { type: String, default: null }, utc: { type: Boolean, default: false } }), emits: ["update:modelValue", "textSubmit", "closed", "cleared", "open", "focus", "blur", "internalModelChange", "recalculatePosition", "flow-step", "updateMonthYear"], setup: function(r, d) {
  var p = d.expose, m = d.emit, _ = r, g = useSlots(), w = ref(false), b = toRef(_, "modelValue"), D = ref(null), O = ref(null), P = ref(null);
  provide("autoApply", _.autoApply);
  var V = computed(function() {
    return _.formatLocale;
  });
  provide("formatLocale", V), provide("textInput", toRef(_, "textInput")), onMounted(function() {
    J(_.modelValue), _.inline || (window.addEventListener("scroll", se), window.addEventListener("resize", ce)), _.inline && (w.value = true);
  }), onUnmounted(function() {
    _.inline || (window.removeEventListener("scroll", se), window.removeEventListener("resize", ce));
  });
  var T = pn(g, "all"), B = pn(g, "input");
  watch(b, function() {
    J(b.value);
  }, { deep: true });
  var N = function(e, t, n, a, r2, o) {
    var u = ref({ top: "0", left: "0", transform: "none" }), i = ref(false), s = function(e2) {
      var t2 = e2.getBoundingClientRect();
      return { left: t2.left + window.scrollX, top: t2.top + window.scrollY };
    }, c = function(e2) {
      for (var t2 = 0, n2 = 0; e2 && !isNaN(e2.offsetLeft) && !isNaN(e2.offsetTop); )
        t2 += e2.offsetLeft - e2.scrollLeft, n2 += e2.offsetTop - e2.scrollTop, e2 = e2.offsetParent;
      return { top: n2, left: t2 };
    }, d2 = function() {
      var a2 = !(arguments.length > 0 && arguments[0] !== void 0) || arguments[0], l = ht(r2);
      if (t && typeof t != "boolean")
        u.value = t(l);
      else if (l) {
        var o2 = l.getBoundingClientRect(), i2 = o2.left, d3 = o2.width, p2 = o2.height, m2 = (t ? c(l) : s(l)).top, v = { top: "".concat(p2 + m2 + 10, "px"), left: "", transform: "none" };
        e === Tn.left && (v.left = "".concat(i2, "px")), e === Tn.right && (v.left = "".concat(i2 + d3, "px"), v.transform = "translateX(-100%)"), e === Tn.center && (v.left = "".concat(i2 + d3 / 2, "px"), v.transform = "translateX(-50%)"), u.value = v, a2 && n && f();
      }
    }, f = function() {
      var e2 = ht(r2);
      if (e2 && n) {
        var l = e2.getBoundingClientRect(), f2 = l.height, p2 = l.top, m2 = (t ? c(e2) : s(e2)).top, v = window.innerHeight - p2 - f2, y = ht(a);
        if (y) {
          var h = y.getBoundingClientRect().height, _2 = h + f2;
          _2 > p2 && _2 > v ? p2 < v && (d2(false), i.value = false) : _2 > v ? (u.value.top = "".concat(m2 - h - 10, "px"), i.value = true) : (d2(false), i.value = false);
        }
      }
      o("recalculatePosition");
    };
    return { openOnTop: i, menuPosition: u, setMenuPosition: d2, recalculatePosition: f };
  }(_.position, _.altPosition, _.autoPosition, D, O, m), F = N.openOnTop, Y = N.menuPosition, K = N.setMenuPosition, U = N.recalculatePosition, W = Fn(_.format, _.timePicker, _.monthPicker, _.range, _.partialRange, _.is24, _.enableTimePicker, _.enableSeconds, V, _.multiDates, _.utc, _.weekPicker, _.textInputOptions, m), z = W.internalModelValue, q = W.inputValue, J = W.parseExternalModelValue, X = W.emitModelValue, Z = W.checkBeforeEmit, Q = W.formatInputValue, ee = computed(function() {
    return { dp__main: true, dp__theme_dark: _.dark, dp__theme_light: !_.dark, dp__flex_display: _.inline, dp__flex_display_with_input: _.inlineWithInput };
  }), te = computed(function() {
    return Ut(_.format) ? _.format : Je(null, _.is24, _.enableSeconds, _.monthPicker, _.timePicker, _.weekPicker, _.enableTimePicker);
  }), ne = computed(function() {
    return _.previewFormat ? _.previewFormat : Ut(te.value) ? te.value : _.format;
  }), ae = computed(function() {
    return typeof _.transitions == "boolean" ? !!_.transitions && _t({}) : _t(_.transitions);
  });
  provide("transitions", ae);
  var re = computed(function() {
    return _.dark ? "dp__theme_dark" : "dp__theme_light";
  }), le = computed(function() {
    return Object.assign({ enterSubmit: true, tabSubmit: true, openMenu: true, rangeSeparator: " - " }, _.textInputOptions);
  }), oe = computed(function() {
    return e = _.filters, Object.assign({ months: [], years: [], times: { hours: [], minutes: [], seconds: [] } }, e);
    var e;
  }), ue = computed(function() {
    var e = function(e2) {
      var t = { hours: getHours(new Date()), minutes: getMinutes(new Date()), seconds: getSeconds(new Date()) };
      return Object.assign(t, e2);
    };
    return _.range ? _.startTime && Array.isArray(_.startTime) ? [e(_.startTime[0]), e(_.startTime[1])] : null : _.startTime && !Array.isArray(_.startTime) ? e(_.startTime) : null;
  }), ie = computed(function() {
    return _.multiCalendars === null ? 0 : typeof _.multiCalendars == "boolean" ? _.multiCalendars ? 2 : 0 : +_.multiCalendars >= 2 ? +_.multiCalendars : 2;
  }), se = function e() {
    w.value && (_.closeOnScroll ? ye() : _.autoPosition ? K() : window.removeEventListener("scroll", e));
  }, ce = function() {
    w.value && K();
  }, de = function() {
    _.disabled || _.readonly || (K(), w.value = !w.value, w.value || ve(), w.value && (m("open"), m("focus")), J(_.modelValue));
  }, fe = function() {
    q.value = "", ve(), m("update:modelValue", null), m("cleared"), ye();
  }, pe = function() {
    Z() && (X(), ye());
  }, me = function() {
    var e = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    if (_.autoApply) {
      var t = !_.enableTimePicker || ct(z.value, _.maxTime, _.minTime);
      t && (X(), _.closeOnAutoApply && !e && ye());
    }
  }, ve = function() {
    z.value = null;
  }, ye = function() {
    _.inline || (w.value && (w.value = false, m("closed"), m("blur"), q.value && J(b.value)), ve(), O.value && O.value.unFocus(), ge2());
  }, he2 = function(e, t) {
    e ? (z.value = e, t && (pe(), m("textSubmit"))) : z.value = null;
  }, _e2 = function() {
    _.autoApply && ct(z.value, _.maxTime, _.minTime) && X();
  }, ge2 = function() {
    P.value && P.value.focus({ preventScroll: true });
  };
  return function(e, t, n) {
    var a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, r2 = a.window, l = r2 === void 0 ? Yn : r2, o = a.event, u = o === void 0 ? "pointerdown" : o;
    if (l) {
      var i = function(a2) {
        var r3 = ht(e), l2 = ht(t);
        r3 && l2 && (r3 === a2.target || a2.composedPath().includes(r3) || a2.composedPath().includes(l2) || n(a2));
      };
      Un(l, u, i, { passive: true });
    }
  }(D, O, ye), p({ closeMenu: ye, selectDate: pe, clearValue: fe, openMenu: de, onScroll: se, formatInputValue: Q }), function(l, o) {
    return openBlock(), createElementBlock("div", { class: normalizeClass(unref(ee)) }, [createVNode(Dt, mergeProps({ ref_key: "inputRef", ref: O }, { placeholder: r.placeholder, hideInputIcon: r.hideInputIcon, readonly: l.readonly, disabled: l.disabled, inputClassName: r.inputClassName, clearable: r.clearable, state: r.state, inline: l.inline, inlineWithInput: r.inlineWithInput, textInput: l.textInput, textInputOptions: unref(le), range: l.range, isMenuOpen: w.value, pattern: unref(te), autoApply: l.autoApply, uid: l.uid, openMenuOnFocus: r.openMenuOnFocus, required: r.required, name: r.name, autocomplete: r.autocomplete }, { "input-value": unref(q), "onUpdate:input-value": o[0] || (o[0] = function(e) {
      return isRef(q) ? q.value = e : null;
    }), onClear: fe, onOpen: de, onSetInputDate: he2, onSetEmptyDate: unref(X), onSelectDate: pe, onClose: ye }), createSlots({ _: 2 }, [renderList(unref(B), function(e, t) {
      return { name: e, fn: withCtx(function(t2) {
        return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(t2)))];
      }) };
    })]), 1040, ["input-value", "onSetEmptyDate"]), createBaseVNode("span", { tabindex: "-1", ref_key: "focusRef", ref: P }, null, 512), w.value ? (openBlock(), createBlock(Teleport, { key: 0, to: r.teleport, disabled: l.inline }, [w.value ? (openBlock(), createBlock(En, mergeProps({ key: 0, ref_key: "dpMenuRef", ref: D, class: unref(re), style: unref(Y) }, Gn(Gn({}, unref(Ot)(l.$props)), {}, { multiCalendars: unref(ie), previewFormat: unref(ne), filters: unref(oe), openOnTop: unref(F), startTime: unref(ue) }), { internalModelValue: unref(z), "onUpdate:internalModelValue": o[1] || (o[1] = function(e) {
      return isRef(z) ? z.value = e : null;
    }), onClosePicker: ye, onSelectDate: pe, onDpOpen: unref(U), onAutoApply: me, onTimeUpdate: _e2, onFlowStep: o[2] || (o[2] = function(e) {
      return l.$emit("flow-step", e);
    }), onUpdateMonthYear: o[3] || (o[3] = function(e) {
      return l.$emit("updateMonthYear", e);
    }) }), createSlots({ _: 2 }, [renderList(unref(T), function(e, t) {
      return { name: e, fn: withCtx(function(t2) {
        return [renderSlot(l.$slots, e, normalizeProps(guardReactiveProps(Gn({}, t2))))];
      }) };
    })]), 1040, ["class", "style", "internalModelValue", "onDpOpen"])) : createCommentVNode("", true)], 8, ["to", "disabled"])) : createCommentVNode("", true)], 2);
  };
} });
var Wn = function() {
  var e = Ln;
  return e.install = function(t) {
    t.component("Vue3DatePicker", e);
  }, e;
}();

// dep:vue3-date-time-picker
var vue3_date_time_picker_default = Wn;
export {
  vue3_date_time_picker_default as default
};
//# sourceMappingURL=vue3-date-time-picker.js.map
